import java.lang.Thread.UncaughtExceptionHandler;



public class DefinedData extends Thread{

	BoardInfo BoardInfo = new BoardInfo();
	UserProperty UserProperty = new UserProperty();
	TradeStatics TradeStatics = new TradeStatics();
	
	String  ShijyouState;
	
	public class BoardInfo{
		int DataNumber = 0;
		int PreDataNumber = 0;
		String  Date;  //システム日付
		String 	time;  //システム時間
		String  MarketOpen;
		String  PriceOpen;
		String  Market;
		String  MarketNetChange;
		String 	Price;
		String 	NetChange;
		String 	NetChangePercent;
		String[][]	Board = new String[23][3];
		Boolean	Board_flag = false;
		Boolean	trigger=false ;
		
		double PriceRange;
		String StockStatus;
		
		int SellIndex;
		int BuyIndex;
		String BoardTime; //取得データ時間
		Object BoardInfoLock = new Object();
	}
	
	public class UserProperty{
		int cash = 1000000;	//所持現金
		int NetGain = 0;	//損益
		int cost;			//手数料	
		UserAction UserAction = new UserAction();
		
		public class UserAction{
			String Action;		//BUY ,BUY_CHANGE ,BUY_CANCEL,
			               		//SELL,SELL_CHANGE,SELL_CANCEL,WAIT
			int Price;      	//購入価格
			int Stack_Num;		//購入株数
			int ActionScore;	//行動決定値　0~10 sell 11~90 wait 91~100 buy
		}
	}
	
	public class TradeStatics{
		
		double [][]	Board = new double[23][3];
		
		double PriceOpen;
		double PresentPrice; // 現在の株価格
		double PFactor = 0.99;
		double PriceChange_Online_Avg = 0; // 株価格の分析点数
		String PriceTrend;   // 株の動向の分類
		
		Double MarketOpen;
		Double PresentMarket; // 現在の日経平均
		double MFactor = 0.999;
		double MarketChange_Online_Avg = 0;      // 日経平均の分析点数
		String MarketTrend;        // 日経平均動向の分類
		
		double PresentPriceChange; // 現在の株価上昇落下値
		
		double PresentMarketChange; //現在の日経平均上昇落下値
		
		
		double BuyTrend; // 気配板での買い気配
		double SellTrend; //気配板での売り気配
		
		double NariyukiBuy; //取引低支持の成り行き買
		double NariyukiSell; //取引低支持の成り行き売り
		double OverSell;
		double UnderBuy;
		
		double HighestPrice;
		double LowestPrice;
		
		
		public class StackInvironment{
		
		}
		public class HoldingStack{
			
		}
	}
	
	class ThrowException implements Runnable {

		public void run() {
			try {
				Thread.sleep((long) Math.random());
				throw new RuntimeException("RutimeException");
			} catch (InterruptedException e) {
			}
		}
	}

	class CatchException implements UncaughtExceptionHandler {
		public void uncaughtException(Thread t, Throwable e) {
			System.out.println(t.getName());
		}
	}
	
	
	
}
