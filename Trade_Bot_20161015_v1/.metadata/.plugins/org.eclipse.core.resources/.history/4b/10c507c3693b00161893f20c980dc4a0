import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.Keys;
import com.google.common.base.Joiner;


import java.util.*;

import javax.swing.JFrame;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.*;
import java.lang.Object;



public class TradePageManagerUnit_Monex extends DefinedData{
	
	String ProcessName = "TradePageManagerUnit_Monex";
	String SimulationMode;
	String TradePageManagerUnitState;
	
	String USER_NAME = "50505399";
	String PASSWORD = "197382hjkL";
	String ADDRESS = "https://www.monex.co.jp/Login/00000000/login/ipan_web/hyoji";
	String target;
	FirefoxProfile profile = new FirefoxProfile(new File("D:\\temp"));  
	//profile.setPreference("general.useragent.override", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)");
	//profile.setPreference("intl.accept_languages", "en-us, en");
	WebDriver driver_buy 		= new FirefoxDriver(profile);
	//WebDriver driver_modify	= new FirefoxDriver();
	//WebDriver driver_check	= new FirefoxDriver();
	//WebDriver driver_sell		= new FirefoxDriver();
		
	BoardInfo BoardInfo;
	BoardInfo TempBoardInfo; 
	
	LogUnit ExtractedLog;  // Trade operation log
	LogUnit ErrorLog;
	
	
	BoardInformationExtraction BoardInfoExtractor;
	CatchException BoardInfoExtractor_catchException;
	
	ShowMeigaraTable ShowMeigaraTable;
		
	TradePageManagerUnit_Monex(String target,BoardInfo BoardInfo,LogUnit ErrorLog,String SimulationMode,String LogPath){  // initialization
		
		TradePageManagerUnitState = "PREPARE";
		System.out.println(  target+ "	"+ProcessName+"_"+SimulationMode+"_"+"Activating" );
		
		this.SimulationMode = SimulationMode;
		this.target = target;
		this.BoardInfo = BoardInfo;
		this.ErrorLog = ErrorLog;
		TempBoardInfo = new BoardInfo();
		
		ExtractedLog = new LogUnit(LogPath,this.target+"_extracted",1); // create log file
		BuyPageOpen(target);
		BoardInfoExtractor = new BoardInformationExtraction();
		BoardInfoExtractor_catchException = new CatchException();
		BoardInfoExtractor.setName("Thread-BoardInfoExtractor-"+target);
		BoardInfoExtractor.setUncaughtExceptionHandler(BoardInfoExtractor_catchException);
		

		ShowMeigaraTable = new ShowMeigaraTable(	target,BoardInfo.Board,
													BoardInfo.time,
													BoardInfo.Date,
													BoardInfo.Market,
													BoardInfo.MarketNetChange,
													BoardInfo.Price,
													BoardInfo.NetChangePercent,
													BoardInfo.BoardInfoLock,
													this.ErrorLog );
		
		TradePageManagerUnitState = "READY";
		BoardInfoExtractor.BoardInformationExtractorState = "READY";
		
		System.out.println( target+ "	"+ProcessName+"_"+SimulationMode+"_"+"Ready" );
	}



		
	public void run() {// TradePageManager 
			
		String SubProcessName = "Main_Loop ";
		System.out.println(  target+ "	"+ProcessName+"_"+SimulationMode+"_"+"Standby" );
		String PreState = TradePageManagerUnitState;
		
		while(!TradePageManagerUnitState.equals("END")){ //trigger of Data collection
			
			switch(TradePageManagerUnitState){
			case "READY":
				try{
					Thread.sleep(10);
				}catch (InterruptedException e){
				}
				PreState = "READY";
				break;
				
			case "START":
				if (PreState.equals("READY")){
					
					BoardInfoExtractor.start();
					
					PreState = TradePageManagerUnitState;
					System.out.println( target+ "	"+ProcessName+"_"+SimulationMode+"_"+"Start");
				}				
				
				TempBoardInfo.Board_flag = true;
				while(TempBoardInfo.Board_flag == true ){
					try{
						Thread.sleep(5);
						//System.out.println("情報取得待機"+target);
						
					}catch (InterruptedException e){
					}	
				}
				synchronized (BoardInfo.BoardInfoLock){
					synchronized (TempBoardInfo.BoardInfoLock){
						System.out.println( target+ "	"+ProcessName+"_"+SimulationMode+"_"+"BoardRenew Start");
						//System.out.println(target+" trigger over");
						BoardInfo.DataNumber =TempBoardInfo.DataNumber;
						BoardInfo.Price = TempBoardInfo.Price;
						//BoardInfo.NetChange = TempBoardInfo.NetChange;
						//BoardInfo.NetChangePercent = TempBoardInfo.NetChangePercent;
						BoardInfo.Market = TempBoardInfo.Market;
						
						if(BoardInfo.DataNumber == 1){
							PriceRangeReference();
							BoardInfo.MarketOpen = TempBoardInfo.Market;
							BoardInfo.PriceOpen = TempBoardInfo.Price;
						}
						String tempMarketOpen = BoardInfo.MarketOpen.replaceAll(",", "");
						String tempMarket = TempBoardInfo.Market.replaceAll(",", "");
						
						double temp = Double.parseDouble(tempMarket) - Double.parseDouble(tempMarketOpen);
						BoardInfo.MarketNetChange = String.valueOf(temp);
		
						String tempPriceOpen = BoardInfo.PriceOpen.replaceAll(",", "");
						String tempPrice = TempBoardInfo.Price.replaceAll(",", "");
						double temp1 = Double.parseDouble(tempPrice) - Double.parseDouble(tempPriceOpen);
						BoardInfo.NetChange = String.valueOf(temp1);
						BoardInfo.NetChangePercent = String.valueOf( temp1/Double.parseDouble(tempPriceOpen));
						
						//BoardInfo.MarketNetChange = TempBoardInfo.MarketNetChange;
						BoardInfo.SellIndex = TempBoardInfo.SellIndex;
						BoardInfo.BuyIndex 	= TempBoardInfo.BuyIndex;
						BoardInfo.Date 		= TempBoardInfo.Date;
						BoardInfo.BoardTime = TempBoardInfo.BoardTime;
				
						for (int x=0 ; x<23; x++){ // update Trade Board
							for (int y=0 ; y<3; y++){
								BoardInfo.Board[x][y] = TempBoardInfo.Board[x][y].replace(",", "");
							}
						}
						try{
						
							ShowMeigaraTable.BoardRenew(	BoardInfo.Board,BoardInfo.BoardTime,TempBoardInfo.Date,
															BoardInfo.Market,BoardInfo.MarketNetChange,
															BoardInfo.Price,BoardInfo.NetChange,BoardInfo.BoardInfoLock);
						//System.out.println("情報取得待機"+target);
						
						}catch (Exception e){
							System.out.println( target+ "	"+ProcessName+"_"+SimulationMode+"_"+"BoardRenew Start");
						}
							
					}
				}
				break;
			case "PAUSE":
				break;
			case "FINISHING":
				System.out.println(target+ "	"+ProcessName+"_"+SimulationMode+"_"+"Finishing" );
				
				while(!BoardInfoExtractor.BoardInformationExtractorState.equals("END")){
					try{
						Thread.sleep(10);
					}catch (InterruptedException e){
					}
				}
				driver_buy.quit();
				
				ShowMeigaraTable.dispose();
				ShowMeigaraTable = null;
				
	
				TradePageManagerUnitState="END";
				break;
			
			case "ERROR":
				break;		
			}	
			try{
				Thread.sleep(1);
			}catch (InterruptedException e){
				e.printStackTrace();
				System.out.println("TradeBoardSimulation FileDataBuffer close error" );
			}	
		}
		System.out.println(target+ "	"+ProcessName+"_"+"End");
	}
		
	
	void BuyPageOpen(String target){
	//---------------------信用買画面------------------------------------------------------
		driver_buy.get(ADDRESS);
		Login(driver_buy, USER_NAME, PASSWORD);
							//---------------------turn to stock page----------------------
		driver_buy.findElement(By.linkText("マーケットボード")).click();
		try{
			Thread.sleep(3000);
		}catch (InterruptedException e){
		}	
		driver_buy.findElement(By.xpath("//div[@id='xb-matrix']/div/div/div[4]/input")).sendKeys(target);
		try{
			Thread.sleep(1000);
		}catch (InterruptedException e){
		}	
		driver_buy.findElement(By.cssSelector("li.ng-scope.selected")).click();
		
	}	
	/*
	void SellPageOpen(String target){
		//---------------------信用買画面------------------------------------------------------
			driver_sell.get(ADDRESS);
			Login(driver_sell, USER_NAME, PASSWORD);
							//---------------------turn to stock page----------------------
			driver_sell.findElement(By.name("i_stock_sec")).sendKeys(target);
			JavascriptExecutor js = (JavascriptExecutor) driver_sell;
			js.executeScript("return stockcheck();");
					
			//---------------------信用買----------------------------------------------------
			driver_sell.findElement(By.linkText("信用買")).click();
			//-----------------------------------------------------------------------------
				
			//----------------------change to selling page---------------------------------------------------
			driver_sell.findElement(By.xpath("//area[@alt='信用返済・現引現渡']")).click();
			//-----------------------------------------------------------------------------------
					
		}
		*/
	/*
	void CheckPageOpen(String target){
		//---------------------信用買画面------------------------------------------------------
			driver_check.get(ADDRESS);
			Login(driver_check, USER_NAME, PASSWORD);
								//---------------------turn to stock page----------------------
			driver_check.findElement(By.name("i_stock_sec")).sendKeys(target);
			JavascriptExecutor js = (JavascriptExecutor) driver_check;
			js.executeScript("return stockcheck();");
				
			//---------------------信用買----------------------------------------------------
			driver_check.findElement(By.linkText("信用買")).click();
			//-----------------------------------------------------------------------------
				
			//----------------------change to selling page---------------------------------------------------
			driver_check.findElement(By.xpath("//area[@alt='保有株式']")).click();
			//-----------------------------------------------------------------------------------		
			}
			*/		
	void Login(WebDriver driver, String user_name, String password) {	
		//---------------------Login ------------------------------------------------------
			driver.findElement(By.name("loginid")).sendKeys(user_name);
			driver.findElement(By.name("passwd")).sendKeys(password);
			driver.findElement(By.xpath("//*[@value='ログイン']")).click();
		//---------------------------------------------------------------------------------
	}
	void PriceRangeReference(){
		String tempPrice = BoardInfo.Price.replaceAll(",", "");
		double RefPrice =Double.parseDouble(tempPrice);
		if(1<=RefPrice && RefPrice<100){ BoardInfo.PriceRange = 30;}
		else if(100<=RefPrice && RefPrice<200){BoardInfo.PriceRange = 50.0;}
		else if(200<=RefPrice && RefPrice<500){BoardInfo.PriceRange = 80.0;}
		else if(500<=RefPrice && RefPrice<700){BoardInfo.PriceRange = 100.0;}
		else if(700<=RefPrice && RefPrice<1000){BoardInfo.PriceRange = 150.0;}
		else if(1000<=RefPrice && RefPrice<1500){BoardInfo.PriceRange = 300.0;}
		else if(1500<=RefPrice && RefPrice<2000){BoardInfo.PriceRange = 400.0;}
		else if(2000<=RefPrice && RefPrice<3000){BoardInfo.PriceRange = 500.0;}
		else if(3000<=RefPrice && RefPrice<5000){BoardInfo.PriceRange = 700.0;}
		else if(5000<=RefPrice && RefPrice<7000){BoardInfo.PriceRange = 1000.0;}
		else if(7000<=RefPrice && RefPrice<10000){BoardInfo.PriceRange = 1500.0;}
		else if(10000<=RefPrice && RefPrice<15000){BoardInfo.PriceRange = 3000.0;}
		else if(15000<=RefPrice && RefPrice<20000){BoardInfo.PriceRange = 4000.0;}
		else if(20000<=RefPrice && RefPrice<30000){BoardInfo.PriceRange = 5000.0;}
		else if(30000<=RefPrice && RefPrice<50000){BoardInfo.PriceRange = 7000.0;}
		else if(50000<=RefPrice && RefPrice<70000){BoardInfo.PriceRange = 10000.0;}
		else if(70000<=RefPrice && RefPrice<100000){BoardInfo.PriceRange = 15000.0;}
		else if(100000<=RefPrice && RefPrice<150000){BoardInfo.PriceRange = 30000.0;}	
		
	} 		
	public class BoardInformationExtraction extends Thread{ // 定期截取情報
		
		String BoardInformationExtractorState; //1.standby 2.run 3.Finish
		String lable_head = "//div[@id='xb-matrix']/div[2]/div";
				    
	    SimpleDateFormat D = new SimpleDateFormat("HH:mm:ss.SSS");
	       		
		public void run(){//BoardInformationExtraction
					
			BoardInformationExtractorState = "START";
			SimpleDateFormat D = new SimpleDateFormat("HH:mm:ss.SSS");
		
			System.out.println(target+" basicタイム");
		
			int j = 0;
			String tString;
			String[] tString_1;
			String color;
			try{
			//------------------------FINISHまでループする----------------------------------------
			while(!TradePageManagerUnitState.equals("FINISHING")){
				while(TempBoardInfo.Board_flag == false){
					try{
						Thread.sleep(1);
					}catch (InterruptedException e){
					}
				}
				
				List<WebElement> childs = driver_buy.findElements(By.xpath("//div[@id='xb-matrix']/div[2]/div"));
				
				TempBoardInfo.BuyIndex=0;
				TempBoardInfo.SellIndex=0;
				j = 0;
				String WriteTemp = "";
				//------------------------気配板から情報更新----------------------------------------
				synchronized (TempBoardInfo.BoardInfoLock){
					for (WebElement e  : childs)
					{
					
						if(j ==0){  //成行注文
							tString =e.getText();
							String temp = tString.replace("\n", "\\n");
							//ExtractedLog.FileWrite(TempBoardInfo.DataNumber+"	"+temp+"	");
							TempBoardInfo.DataNumber++;
							WriteTemp = temp;
							
							tString_1 = tString.split("\n");
							if(tString_1.length ==1){// 時になし
								TempBoardInfo.Board[0][0] = "0";
								TempBoardInfo.Board[0][1] = tString_1[0];
								TempBoardInfo.Board[0][2] = "0";
							}
							else if(tString_1.length ==2){//買側注文あり
								if(tString_1[0].equals("成行注文")){
									TempBoardInfo.Board[0][0] = "0";
									TempBoardInfo.Board[0][1] = tString_1[0];
									TempBoardInfo.Board[0][2] = tString_1[1];
								}
								else if (tString_1[1].equals("成行注文")){//売側注文あり
									TempBoardInfo.Board[0][0] = tString_1[0];
									TempBoardInfo.Board[0][1] = tString_1[1];
									TempBoardInfo.Board[0][2] = "0";
								}
							}
							else if(tString_1.length ==3){//両方注文あり
								TempBoardInfo.Board[0][0] = tString_1[0];
								TempBoardInfo.Board[0][1] = tString_1[1];
								TempBoardInfo.Board[0][2] = tString_1[2];
							}
						}
						else if (j==2){
							tString =e.getText();
							String temp = tString.replace("\n", "\\n");
							//ExtractedLog.FileWrite(temp+"	");
							WriteTemp = WriteTemp+"	"+temp;
							tString_1 = tString.split("\n");
							if(tString_1.length ==1){// 時になし OVERのみ
								TempBoardInfo.Board[1][0] = "0";
								TempBoardInfo.Board[1][1] = tString_1[0];
								TempBoardInfo.Board[1][2] = "0";
							}
							else if(tString_1.length ==2){//OVER買あり
								if(tString_1[0].equals("OVER")){
									TempBoardInfo.Board[1][0] = "0";
									TempBoardInfo.Board[1][1] = tString_1[0];
									TempBoardInfo.Board[1][2] = tString_1[1];
								}
								else if (tString_1[1].equals("OVER")){//OVER売あり
									TempBoardInfo.Board[1][0] = tString_1[0];
									TempBoardInfo.Board[1][1] = tString_1[1];
									TempBoardInfo.Board[1][2] = "0";
								}
							}
							else if(tString_1.length ==3){//両方注文あり？？　たぶん発生しない
								TempBoardInfo.Board[1][0] = tString_1[0];
								TempBoardInfo.Board[1][1] = tString_1[1];
								TempBoardInfo.Board[1][2] = tString_1[2];
							}
						}
						else if (j>2){	
							tString =e.getText();
							String temp = tString.replace("\n", "\\n");
							//ExtractedLog.FileWrite(temp+"	");
							WriteTemp = WriteTemp+"	"+temp;
							tString_1 = tString.split("\n");
						
							if(TempBoardInfo.BuyIndex==0 && j<13 ){
								if(tString_1.length ==3){ //売あり　点が付いている
									if(tString_1[1].equals("・")||tString_1[1].equals("前")||tString_1[1].equals("特")){
										TempBoardInfo.Board[j-1][0] = tString_1[0];
										TempBoardInfo.Board[j-1][1] = tString_1[2];
										TempBoardInfo.Board[j-1][2] = "0";
									}
									else if(tString_1[2].equals("・")||tString_1[2].equals("前")||tString_1[2].equals("特")){
										TempBoardInfo.Board[j-1][0] = tString_1[0];
										TempBoardInfo.Board[j-1][1] = tString_1[1];
										TempBoardInfo.Board[j-1][2] = "0";
									}
									
									TempBoardInfo.BuyIndex = j-1;
								}
								else if(tString_1.length ==5) {//寄せ
									TempBoardInfo.Board[j-1][0] = tString_1[0];
									TempBoardInfo.Board[j-1][1] = tString_1[2];
									TempBoardInfo.Board[j-1][2] = tString_1[3];
									TempBoardInfo.BuyIndex = j-1;
								}
								else if(tString_1.length ==4) {//開始前　売買あり
									if(tString_1[1].equals("前")||tString_1[1].equals("特")){
										TempBoardInfo.Board[j-1][0] = tString_1[0];
										TempBoardInfo.Board[j-1][1] = tString_1[2];
										TempBoardInfo.Board[j-1][2] = tString_1[3];
									}
									else if (tString_1[2].equals("前")||tString_1[2].equals("特")){
										TempBoardInfo.Board[j-1][0] = tString_1[0];
										TempBoardInfo.Board[j-1][1] = tString_1[1];
										TempBoardInfo.Board[j-1][2] = tString_1[3];
									}
									TempBoardInfo.BuyIndex = j-1;
								}
								else if(tString_1.length ==2){//売あり　
									TempBoardInfo.Board[j-1][0] = tString_1[0];
									TempBoardInfo.Board[j-1][1] = tString_1[1];
									TempBoardInfo.Board[j-1][2] = "0";
								}
								else{ //漲停
									TempBoardInfo.Board[j-1][0] = "0";
									TempBoardInfo.Board[j-1][1] = "0";
									TempBoardInfo.Board[j-1][2] = "0";
									
								}		
							}
							else{
								if(tString_1.length ==3){//買あり　点が付いている
									TempBoardInfo.SellIndex = j-1;
									TempBoardInfo.Board[j-1][0] = "0";
									TempBoardInfo.Board[j-1][1] = tString_1[0];
									TempBoardInfo.Board[j-1][2] = tString_1[1];
									//}	
								}
								else if (tString_1.length == 4){//開始前　売買あり
									TempBoardInfo.SellIndex = j-1;
									TempBoardInfo.Board[j-1][0] = "0";
									TempBoardInfo.Board[j-1][1] = tString_1[1];
									TempBoardInfo.Board[j-1][2] = tString_1[3];
									//}	
								}
								//if(j==19){
								//	TempBoardInfo.Board[j-2][0] = "0";
								//	TempBoardInfo.Board[j-2][1] = tString_1[1];
								//	TempBoardInfo.Board[j-2][2] = tString_1[2];
								//}
								else if(tString_1.length ==2){//買あり　
									TempBoardInfo.Board[j-1][0] = "0";
									TempBoardInfo.Board[j-1][1] = tString_1[0];
									TempBoardInfo.Board[j-1][2] = tString_1[1];
								}	
								else {//跌停
									TempBoardInfo.Board[j-1][0] = "0";
									TempBoardInfo.Board[j-1][1] = "0";
									TempBoardInfo.Board[j-1][2] = "0";
								}	
							}
							//System.out.println(BoardInfo.TempBoard[j-2][0] + "	"+BoardInfo.TempBoard[j-2][1]+ "	" +BoardInfo.TempBoard[j-2][2]);
						}
						j++;
					}
				//------------------------時価情報更新----------------------------------------
					TempBoardInfo.Price = driver_buy.findElement(By.xpath("//div[@id='xb-matrix']/div/div[3]/div/span[1]")).getText();
					
					//TempBoardInfo.NetChange = driver_buy.findElement(By.xpath("//div[@id='xb-matrix']/div/div[3]/div[2]/span[1]")).getText();
					//TempBoardInfo.NetChangePercent = driver_buy.findElement(By.xpath("//div[@id='xb-matrix']/div/div[3]/div[2]/span[2]")).getText();
					
					//color = driver_buy.findElement(By.xpath("//div[@id='xb-matrix']/div/div[3]/div[2]/span[2]")).getCssValue("color");
					//if(color.equals("rgba(0, 85, 255, 1)")){//minus
					//	TempBoardInfo.NetChange = "-"+TempBoardInfo.NetChange;
						//TempBoardInfo.NetChangePercent = "-" + TempBoardInfo.NetChangePercent;
					//}
					WriteTemp = WriteTemp+"	"+TempBoardInfo.Price;
					//WriteTemp = WriteTemp+"	"+TempBoardInfo.NetChange;
					//WriteTemp = WriteTemp+"	"+TempBoardInfo.NetChangePercent;
					//ExtractedLog.FileWrite(TempBoardInfo.Price+"	");
					//ExtractedLog.FileWrite(TempBoardInfo.NetChange+"	");
					//ExtractedLog.FileWrite(TempBoardInfo.NetChangePercent+"	");
					
					//------------------------日経平均情報更新----------------------------------------
					TempBoardInfo.Market = driver_buy.findElement(By.xpath("//div[@id='index-ticker']/div[2]/div/ul/li/span[1]")).getText();
					//TempBoardInfo.MarketNetChange = driver_buy.findElement(By.xpath("//div[@id='index-ticker']/div[2]/div/ul/li/span[2]")).getText();
					
					//color = driver_buy.findElement(By.xpath("//div[@id='index-ticker']/div[2]/div/ul/li/span[1]")).getCssValue("color");
					//System.out.println(color);
					//if(color.equals("rgba(38, 50, 56, 1)")){//minus
					//	TempBoardInfo.MarketNetChange = "-" +TempBoardInfo.MarketNetChange;
					//}
					//else{
					//	TempBoardInfo.MarketNetChange =TempBoardInfo.MarketNetChange;
						
					//}
					WriteTemp = WriteTemp+"	"+TempBoardInfo.Market;
					//WriteTemp = WriteTemp+"	"+TempBoardInfo.MarketNetChange;
					
					//ExtractedLog.FileWrite(TempBoardInfo.Market+"	");
					//ExtractedLog.FileWrite(TempBoardInfo.MarketNetChange+"	");
					
				//------------------------更新完了時の----------------------------------------
					Date Now = new Date();
					SimpleDateFormat DD = new SimpleDateFormat("yyyy/MM/dd");
					TempBoardInfo.BoardTime = D.format(Now);
					TempBoardInfo.Date = DD.format(Now);
					
					TempBoardInfo.Board_flag=false;
					
					WriteTemp = TempBoardInfo.DataNumber+"	"+TempBoardInfo.Date+"	"+ TempBoardInfo.BoardTime+"	"+WriteTemp;
					ExtractedLog.FileWrite(WriteTemp+"\r\n");
					//ExtractedLog.FileWrite(TempBoardInfo.BoardTime+"\r\n");
					System.out.println( target+ "	Extracted	" + TempBoardInfo.BoardTime );
					Now = null; 
					childs = null;
				}
			}
			//}catch (VirtualMachineError e){
			}catch (NoSuchElementException  e){
				 System.out.println(e+"tradeboard child");
			}
			
			System.out.println(target+ "	"+ProcessName+"_"+SimulationMode+"_"+"BoardInformationExtractor End ");
			BoardInformationExtractorState = "END";
		
				
		}	
	}
	void ErrorLogWrite(String ProccessName, String SubProcessName , String Error){
		Calendar rightNow;
		Date Now = new Date();
    	SimpleDateFormat D = new SimpleDateFormat("yyyy/MM/dd	HH:mm:ss.SSS");
    	rightNow = Calendar.getInstance();
		Now = rightNow.getTime();
		
		String temp =  D.format(Now) + "	" + ProccessName + "	" + SubProcessName + "	" +Error +"\r\n";
		ErrorLog.FileWrite(temp);
		}
}
