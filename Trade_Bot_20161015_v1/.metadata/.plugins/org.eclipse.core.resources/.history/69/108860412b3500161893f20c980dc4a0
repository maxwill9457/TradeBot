import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.firefox.FirefoxProfile;

import com.google.common.base.Joiner;

import java.util.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.*;
import java.lang.Object;

public class TradePageManagerUnit extends Thread{ 
	
	String TradePageManagerUnitState;
	String USER_NAME = "Z87-0084581";
	String PASSWORD = "VAEHIETG";
	String ADDRESS = "https://site2.sbisec.co.jp/ETGate/WPLETmgR001Control?OutSide=on&getFlg=on&burl=search_home&cat1=home&cat2=begin&dir=info&file=home_merit.html&adpr=lis_yss_pc_kt_sbi&wapr=5486ff76";
	String target;
		
	WebDriver driver_buy 		= new FirefoxDriver();
	//WebDriver driver_modify	= new FirefoxDriver();
	//WebDriver driver_check	= new FirefoxDriver();
	//WebDriver driver_sell		= new FirefoxDriver();
		
	TradeInfo TradeInfo= new TradeInfo(); 
	SellInformationExtraction SellInfoExtractor;
	BuyInformationExtraction BuyInfoExtractor;
	BasicInformationExtraction BasicInfoExtractor;
	
		
	TradePageManagerUnit(String target){  // initialization
		TradePageManagerUnitState = "PREPARE";
		System.out.println( "TradePageManagerUnit Activating" );
		this.target = target;
		BuyPageOpen(target);	
		SellInfoExtractor = new SellInformationExtraction();
		BuyInfoExtractor = new BuyInformationExtraction();
		BasicInfoExtractor = new BasicInformationExtraction();
		
		TradePageManagerUnitState = "READY";
		System.out.println( "TradePageManagerUnit Ready" );
	}
		
	public class TradeInfo{
		String time;
		String TempPrice;
		String Price;
		String yest_diff;
		String[][] TempBoard = new String[19][3];
		String[][] Board = new String[19][3];
		Boolean sell_flag = false;
		Boolean buy_flag = false;
		Boolean basic_flag = false;
		Boolean trigger=false ;
		String Selltime;
		String Buytime;
		String Basictime;
		
	}
		
	public void run() {// TradePageManager 
			
		System.out.println( "TradePageManagerUnit Standby" );
		String PreState = TradePageManagerUnitState;
		
		int  i = 1;	
		while(i==1){ //trigger of Data collection
			switch(TradePageManagerUnitState){
			case "READY":
				try{
					Thread.sleep(1);
				}catch (InterruptedException e){
				}
				PreState = "READY";
				break;
				
			case "START":
				if (PreState.equals("READY")){
					SellInfoExtractor.start();
					BuyInfoExtractor.start();
					//BasicInfoExtractor.start();
					PreState = TradePageManagerUnitState;
				}
				
				System.out.println(target+" trigger start");
				TradeInfo.buy_flag = true;
				TradeInfo.sell_flag = true;
				TradeInfo.basic_flag = true;
				while(TradeInfo.buy_flag==true || TradeInfo.sell_flag==true){// wait until update is finished
				//while(TradeInfo.buy_flag==true || TradeInfo.sell_flag==true || TradeInfo.basic_flag == true){// wait until update is finished
					try{
						Thread.sleep(5);
					}catch (InterruptedException e){
					}	
				}
				System.out.println(target+" trigger over");
				TradeInfo.Price = TradeInfo.TempPrice;
				
				for (int x=0 ; x<19; x++){ // update Trade Board
					for (int y=0 ; y<3; y++){
						TradeInfo.Board[x][y] = TradeInfo.TempBoard[x][y];//.replace(",", "");
						TradeInfo.Board[x][y] = TradeInfo.Board[x][y];//.replace("  ", "");
					}
				}
				System.out.println(target+" renew");
				//System.out.println(TradePageManager1.TradeInfo.Price); // print  result
				//for (int x=0 ; x<19; x++){ // show Trade board information
					//System.out.println(TradePageManager1.TradeInfo.TempBoard[x][0] + " "+TradePageManager1.TradeInfo.TempBoard[x][1]+" "+TradePageManager1.TradeInfo.TempBoard[x][2]);
					//System.out.println(TradePageManager1.TradeInfo.Board[x][0] + " "+TradePageManager1.TradeInfo.Board[x][1]+" "+TradePageManager1.TradeInfo.Board[x][2]);
				//}
				//System.out.println("trigger end");		
				break;
			case "PAUSE":
				break;
			case "FINISH":
				driver_buy.quit();
				System.out.println("quit");
				i=0;
				break;
			case "ERROR":
				break;
					
			}	
		}
	}
		
	void BuyPageOpen(String target){
	//---------------------信用買画面------------------------------------------------------
		driver_buy.get(ADDRESS);
		Login(driver_buy, USER_NAME, PASSWORD);
							//---------------------turn to stock page----------------------
		driver_buy.findElement(By.name("i_stock_sec")).sendKeys(target);
		JavascriptExecutor js = (JavascriptExecutor) driver_buy;
		js.executeScript("return stockcheck();");
		try{
			Thread.sleep(1000);
		}catch (InterruptedException e){
		}		
		//---------------------信用買----------------------------------------------------
		driver_buy.findElement(By.linkText("信用買")).click();
			
		//----------------------auto renew---------------------------------------------------
		try{
			Thread.sleep(1000);
		}catch (InterruptedException e){
		}	
		driver_buy.findElement(By.id("imgRefArea_MTB0")).click(); 
		//-----------------------------------------------------------------------------------
	}
		
	/*
	void SellPageOpen(String target){
		//---------------------信用買画面------------------------------------------------------
			driver_sell.get(ADDRESS);
			Login(driver_sell, USER_NAME, PASSWORD);
							//---------------------turn to stock page----------------------
			driver_sell.findElement(By.name("i_stock_sec")).sendKeys(target);
			JavascriptExecutor js = (JavascriptExecutor) driver_sell;
			js.executeScript("return stockcheck();");
					
			//---------------------信用買----------------------------------------------------
			driver_sell.findElement(By.linkText("信用買")).click();
			//-----------------------------------------------------------------------------
				
			//----------------------change to selling page---------------------------------------------------
			driver_sell.findElement(By.xpath("//area[@alt='信用返済・現引現渡']")).click();
			//-----------------------------------------------------------------------------------
					
		}
		*/
	/*
	void CheckPageOpen(String target){
		//---------------------信用買画面------------------------------------------------------
			driver_check.get(ADDRESS);
			Login(driver_check, USER_NAME, PASSWORD);
								//---------------------turn to stock page----------------------
			driver_check.findElement(By.name("i_stock_sec")).sendKeys(target);
			JavascriptExecutor js = (JavascriptExecutor) driver_check;
			js.executeScript("return stockcheck();");
				
			//---------------------信用買----------------------------------------------------
			driver_check.findElement(By.linkText("信用買")).click();
			//-----------------------------------------------------------------------------
				
			//----------------------change to selling page---------------------------------------------------
			driver_check.findElement(By.xpath("//area[@alt='保有株式']")).click();
			//-----------------------------------------------------------------------------------		
			}
			*/
			
	void Login(WebDriver driver, String user_name, String password) {	
		//---------------------Login ------------------------------------------------------
			driver.findElement(By.name("user_id")).sendKeys(user_name);
			driver.findElement(By.name("user_password")).sendKeys(password);
			driver.findElement(By.name("ACT_login")).click();
		//---------------------------------------------------------------------------------
	}
		
	public class SellInformationExtraction extends Thread{ // 定期截取情報
		
		//String StartPrice;//始値 
		//String YestEndPrice;//前日終値
		//String HighestPrice;//高値
		//String LowestPrice;//安値

		String lable_base= "MTB0_";
		String lable_temp;
		
			    
	    SimpleDateFormat D = new SimpleDateFormat("HH:mm:ss");
	       		
		public void run(){//SellInformationExtraction
					
			//System.out.println("sell_start");
					//StartPrice = driver_buy.findElement(By.id("MTB0_2")).getText();
					//YestEndPrice = driver_buy.findElement(By.id("MTB0_5")).getText();
					//String[][] Board = new String[19][2];
			int i =1;
			while(i==1){
				while(TradeInfo.buy_flag == false){
					try{
						Thread.sleep(1);
					}catch (InterruptedException e){
					}	
				}
				System.out.println(target+" sell初値");
				int x=0;
				int y=0;
				for (x=0;x<19;x++){
					for(y=0 ; y<2 ;y++){
						//System.out.println(j);				
						lable_temp = lable_base+ String.valueOf(10+x*3+y);
						//System.out.println(lable_temp);
						TradeInfo.TempBoard[x][y] = driver_buy.findElement(By.id(lable_temp)).getText();					
					}
					if(TradeInfo.TempBoard[x][0].equals(" ")){ //無data
						TradeInfo.TempBoard[x][0] = "0";
					//	System.out.println(TradeInfo.TempBoard[x][0]+" "+TradeInfo.TempBoard[x][1]);
						for(int temp =x+1 ; temp<18;temp++){
							//lable_temp = lable_base+ String.valueOf(10+temp*3+1);
							//System.out.println(lable_temp);
							TradeInfo.TempBoard[temp][0] = "0";
						//	System.out.println(TradeInfo.TempBoard[x][0]+" "+TradeInfo.TempBoard[x][1]);
						}
						lable_temp = lable_base+ String.valueOf(64);
						TradeInfo.TempBoard[18][0] = driver_buy.findElement(By.id(lable_temp)).getText();
						if(TradeInfo.TempBoard[18][0].equals(" ")){ //無data
							TradeInfo.TempBoard[18][0] = "0";
						}
						break;
					}
					//System.out.println(TradeInfo.TempBoard[x][0]+" "+TradeInfo.TempBoard[x][1]);
				}
				System.out.println(target+" sell気配");
				Date Now = new Date();	
				TradeInfo.Selltime = D.format(Now);
				TradeInfo.sell_flag=false; 	
				System.out.println(target+" sellタイム");
				Now = null; 
			}
		}	
	}
		
	public class BuyInformationExtraction extends Thread{ // 定期截取情報
			
		//String StartPrice;//始値 
		//String YestEndPrice;//前日終値
		//String HighestPrice;//高値
		//String LowestPrice;//安値

		//String[][] Board = new String[19][2];

		String lable_base= "MTB0_";
		String lable_temp;
		
		SimpleDateFormat D = new SimpleDateFormat("HH:mm:ss");
	       
		public void run(){//BuyInformationExtraction
				
			//System.out.println("buy_start");
			//StartPrice = driver_buy.findElement(By.id("MTB0_2")).getText();
			//YestEndPrice = driver_buy.findElement(By.id("MTB0_5")).getText();
			
			
			//TradeInfo.TempPrice =tString;
			String tString;
			String[] tString_1;
			String tString_2;
			int i =1;
			while(i==1){
				while(TradeInfo.buy_flag == false){
					try{
						Thread.sleep(1);
					}catch (InterruptedException e){
					}	
				}
				/*
				tString = driver_buy.findElement(By.id("MTB0_0")).getText();
				if (!tString.equals(" --  ")){ 
					tString_1 = tString.split(" ");
					tString_2 = tString_1[1].replace(",", "");
					
					TradeInfo.TempPrice = tString_2;
				}
				else{
					TradeInfo.TempPrice = tString;
				}
				*/
				//TradeInfo.TempPrice = "--";
				System.out.println(target+" buy初値");
				int x=0;
				int y=0;
				for (x=18;x>0;x--){
					for(y=0 ; y<2 ;y++){		
					//System.out.println(j);
					
						lable_temp = lable_base+ String.valueOf(10+x*3+y+1);
						//System.out.println(lable_temp);
						TradeInfo.TempBoard[x][y+1] = driver_buy.findElement(By.id(lable_temp)).getText();
							
					}
	
					if(TradeInfo.TempBoard[x][2].equals(" ")){ //無data
						TradeInfo.TempBoard[x][2] = "0";
						//System.out.println(Board[x][0]+" "+Board[x][1]);
						for(int temp =x ; temp>0;temp--){
							//lable_temp = lable_base+ String.valueOf(10+temp*3+1);
							//System.out.println(lable_temp);
							TradeInfo.TempBoard[temp][2] = "0";
							//System.out.println(Board[x][0]+" "+Board[x][1]);
						}
						lable_temp = lable_base+ String.valueOf(12);
						TradeInfo.TempBoard[0][2] = driver_buy.findElement(By.id(lable_temp)).getText();
						if(TradeInfo.TempBoard[0][2].equals(" ")){ //無data
							TradeInfo.TempBoard[0][2] = "0";
						}
						break;
					}
					//System.out.println(Board[x][0]+" "+Board[x][1]);
					//kill text;
				}
				System.out.println(target+" buy気配");
				Date Now = new Date();
				TradeInfo.Buytime = D.format(Now);
				TradeInfo.buy_flag=false;
				System.out.println(target+" buyタイム");
				Now = null; 
			}
		}
	}
	public class BasicInformationExtraction extends Thread{ // 定期截取情報
		
		String lable_base= "MTB0_";
		String lable_temp;
		
		SimpleDateFormat D = new SimpleDateFormat("HH:mm:ss");
		
		public void run(){//BuyInformationExtraction
			int i =1;
			while(i==1){
				while(TradeInfo.buy_flag == false){
					try{
						Thread.sleep(1);
					}catch (InterruptedException e){
					}	
				}
				
				/*String tString = driver_buy.findElement(By.id("MTB0_0")).getText();
				if (!tString.equals(" --  ")){ 
					String[] tString_1 = tString.split(" ");
					String tString_2 = tString_1[1].replace(",", "");
				
					TradeInfo.TempPrice = tString_2;
				}
				else{
					TradeInfo.TempPrice = tString;
				}*/
				TradeInfo.TempPrice = driver_buy.findElement(By.id("MTB0_0")).getText();
				TradeInfo.yest_diff = driver_buy.findElement(By.id("MTB0_1")).getText();
				
				System.out.println(target+" basic気配");
				Date Now = new Date();
				TradeInfo.Basictime = D.format(Now);
				TradeInfo.basic_flag=false;
				System.out.println(target+" basicタイム");
				Now = null; 
				
			}
		}
	}
}
