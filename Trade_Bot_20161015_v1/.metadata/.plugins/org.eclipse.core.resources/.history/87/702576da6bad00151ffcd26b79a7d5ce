import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.Keys;
import com.google.common.base.Joiner;


import java.util.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.*;
import java.lang.Object;



public class TradePageManagerUnit_Monex extends DefinedData{
	
	String TradePageManagerUnitState;
	
	String USER_NAME = "50505399";
	String PASSWORD = "197382hjkL";
	String ADDRESS = "https://www.monex.co.jp/Login/00000000/login/ipan_web/hyoji";
	String target;
	FirefoxProfile profile = new FirefoxProfile(new File("D:\\temp"));  
	//profile.setPreference("general.useragent.override", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)");
	//profile.setPreference("intl.accept_languages", "en-us, en");
	WebDriver driver_buy 		= new FirefoxDriver(profile);
	//WebDriver driver_modify	= new FirefoxDriver();
	//WebDriver driver_check	= new FirefoxDriver();
	//WebDriver driver_sell		= new FirefoxDriver();
		
	BoardInfo BoardInfo;
	BoardInfo TempBoardInfo= new BoardInfo(); 
	Object TempBoardInfoLock = new Object();
	LogUnit ExtractedLog;  // Trade operation log
	
	
	BoardInformationExtraction BoardInfoExtractor;
	CatchException BoardInfoExtractor_catchException;
	

	
		
	TradePageManagerUnit_Monex(String target,BoardInfo BoardInfo){  // initialization
		TradePageManagerUnitState = "PREPARE";
		System.out.println( target + " TradePageManagerUnit Activating" );
		
		this.target = target;
		this.BoardInfo = BoardInfo;
		
		BuyPageOpen(target);
		BoardInfoExtractor = new BoardInformationExtraction();
		BoardInfoExtractor_catchException = new CatchException();
		BoardInfoExtractor.setName("Thread-BoardInfoExtractor-"+target);
		BoardInfoExtractor.setUncaughtExceptionHandler(BoardInfoExtractor_catchException);
		
		
		ExtractedLog = new LogUnit(this.target+"_extracted"); // create log file
		TradePageManagerUnitState = "READY";
		BoardInfoExtractor.BoardInformationExtractorState = "READY";
		
		System.out.println( target + " TradePageManagerUnit Ready" );
	}


	

		
	public void run() {// TradePageManager 
			
		System.out.println( target + " TradePageManagerUnit Standby" );
		String PreState = TradePageManagerUnitState;
		
		while(!TradePageManagerUnitState.equals("END")){ //trigger of Data collection
			
			switch(TradePageManagerUnitState){
			case "READY":
				try{
					Thread.sleep(10);
				}catch (InterruptedException e){
				}
				PreState = "READY";
				break;
				
			case "START":
				if (PreState.equals("READY")){
					
					BoardInfoExtractor.start();
					
					//BasicInfoExtractor.start();
					PreState = TradePageManagerUnitState;
					System.out.println(target+" TradePageManagerUnit start");
				}				
				

				TempBoardInfo.Board_flag = true;
				while(TempBoardInfo.Board_flag == true ){
					try{
						Thread.sleep(5);
					}catch (InterruptedException e){
					}	
				}
				synchronized (BoardInfo.BoardInfoLock){
					synchronized (TempBoardInfo.BoardInfoLock){
		
						//System.out.println(target+" trigger over");
						BoardInfo.Price = TempBoardInfo.Price;
						BoardInfo.NetChange = TempBoardInfo.NetChange;
						BoardInfo.NetChangePercent = TempBoardInfo.NetChangePercent;
						BoardInfo.Shijyou = TempBoardInfo.Shijyou;
						BoardInfo.ShijyouNetChange = TempBoardInfo.ShijyouNetChange;
						BoardInfo.SellIndex = TempBoardInfo.SellIndex;
						BoardInfo.BuyIndex = TempBoardInfo.BuyIndex;
						BoardInfo.BoardTime = TempBoardInfo.BoardTime;
				
						for (int x=0 ; x<23; x++){ // update Trade Board
							for (int y=0 ; y<3; y++){
								BoardInfo.Board[x][y] = TempBoardInfo.Board[x][y].replace(",", "");
							}
						}
					}
				}
				break;
			case "PAUSE":
				break;
			case "FINISHING":
				System.out.println(" TradePageManagerUnit FINISHING" + target );
				
				while(!BoardInfoExtractor.BoardInformationExtractorState.equals("END")){
					try{
						Thread.sleep(10);
					}catch (InterruptedException e){
					}
				}
				driver_buy.quit();
				
				TradePageManagerUnitState="END";
				break;
			
			case "ERROR":
				break;		
			}	
		}
		System.out.println("TradePageManagerUnit END	" + target );
	}
		

	void BuyPageOpen(String target){
	//---------------------信用買画面------------------------------------------------------
		driver_buy.get(ADDRESS);
		Login(driver_buy, USER_NAME, PASSWORD);
							//---------------------turn to stock page----------------------
		driver_buy.findElement(By.linkText("マーケットボード")).click();
		try{
			Thread.sleep(3000);
		}catch (InterruptedException e){
		}	
		driver_buy.findElement(By.xpath("//div[@id='xb-matrix']/div/div/div[4]/input")).sendKeys(target);
		try{
			Thread.sleep(1000);
		}catch (InterruptedException e){
		}	
		driver_buy.findElement(By.cssSelector("li.ng-scope.selected")).click();
		
	}
		
	/*
	void SellPageOpen(String target){
		//---------------------信用買画面------------------------------------------------------
			driver_sell.get(ADDRESS);
			Login(driver_sell, USER_NAME, PASSWORD);
							//---------------------turn to stock page----------------------
			driver_sell.findElement(By.name("i_stock_sec")).sendKeys(target);
			JavascriptExecutor js = (JavascriptExecutor) driver_sell;
			js.executeScript("return stockcheck();");
					
			//---------------------信用買----------------------------------------------------
			driver_sell.findElement(By.linkText("信用買")).click();
			//-----------------------------------------------------------------------------
				
			//----------------------change to selling page---------------------------------------------------
			driver_sell.findElement(By.xpath("//area[@alt='信用返済・現引現渡']")).click();
			//-----------------------------------------------------------------------------------
					
		}
		*/
	/*
	void CheckPageOpen(String target){
		//---------------------信用買画面------------------------------------------------------
			driver_check.get(ADDRESS);
			Login(driver_check, USER_NAME, PASSWORD);
								//---------------------turn to stock page----------------------
			driver_check.findElement(By.name("i_stock_sec")).sendKeys(target);
			JavascriptExecutor js = (JavascriptExecutor) driver_check;
			js.executeScript("return stockcheck();");
				
			//---------------------信用買----------------------------------------------------
			driver_check.findElement(By.linkText("信用買")).click();
			//-----------------------------------------------------------------------------
				
			//----------------------change to selling page---------------------------------------------------
			driver_check.findElement(By.xpath("//area[@alt='保有株式']")).click();
			//-----------------------------------------------------------------------------------		
			}
			*/
			
	void Login(WebDriver driver, String user_name, String password) {	
		//---------------------Login ------------------------------------------------------
			driver.findElement(By.name("loginid")).sendKeys(user_name);
			driver.findElement(By.name("passwd")).sendKeys(password);
			driver.findElement(By.xpath("//*[@value='ログイン']")).click();
		//---------------------------------------------------------------------------------
	}
		
	public class BoardInformationExtraction extends Thread{ // 定期截取情報
		
		String BoardInformationExtractorState; //1.standby 2.run 3.Finish
		String lable_head = "//div[@id='xb-matrix']/div[2]/div";
				    
	    SimpleDateFormat D = new SimpleDateFormat("HH:mm:ss");
	       		
		public void run(){//BoardInformationExtraction
					
			BoardInformationExtractorState = "START";
			SimpleDateFormat D = new SimpleDateFormat("HH:mm:ss");
		
			System.out.println(target+" basicタイム");
		
			int j = 0;
			String tString;
			String[] tString_1;
			String color;
			try{
			//------------------------FINISHまでループする----------------------------------------
			while(!TradePageManagerUnitState.equals("FINISHING")){
				while(TempBoardInfo.Board_flag == false){
					try{
						Thread.sleep(1);
					}catch (InterruptedException e){
					}
				}
				List<WebElement> childs = driver_buy.findElements(By.xpath("//div[@id='xb-matrix']/div[2]/div"));
				
				TempBoardInfo.BuyIndex=0;
				TempBoardInfo.SellIndex=0;
				j = 0;
				//------------------------気配板から情報更新----------------------------------------
				synchronized (TempBoardInfo.BoardInfoLock){
					for (WebElement e  : childs)
					{
					
						if(j ==0){  //成行注文
							tString =e.getText();
							ExtractedLog.FileWrite(tString);
							tString_1 = tString.split("\n");
							if(tString_1.length ==1){// 時になし
								TempBoardInfo.Board[0][0] = "0";
								TempBoardInfo.Board[0][1] = tString_1[0];
								TempBoardInfo.Board[0][2] = "0";
							}
							else if(tString_1.length ==2){//買側注文あり
								if(tString_1[0].equals("成行注文")){
									TempBoardInfo.Board[0][0] = "0";
									TempBoardInfo.Board[0][1] = tString_1[0];
									TempBoardInfo.Board[0][2] = tString_1[1];
								}
								else if (tString_1[1].equals("成行注文")){//売側注文あり
									TempBoardInfo.Board[0][0] = tString_1[0];
									TempBoardInfo.Board[0][1] = tString_1[1];
									TempBoardInfo.Board[0][2] = "0";
								}
							}
							else if(tString_1.length ==3){//両方注文あり
								TempBoardInfo.Board[0][0] = tString_1[0];
								TempBoardInfo.Board[0][1] = tString_1[1];
								TempBoardInfo.Board[0][2] = tString_1[2];
							}
						}
						else if (j==2){
							tString =e.getText();
							//ExtractedLog.FileWrite(tString.replace("\n", "\\n")+"	");
							tString_1 = tString.split("\n");
							if(tString_1.length ==1){// 時になし
								TempBoardInfo.Board[1][0] = "0";
								TempBoardInfo.Board[1][1] = tString_1[0];
								TempBoardInfo.Board[1][2] = "0";
							}
							else if(tString_1.length ==2){//OVER買あり
								if(tString_1[0].equals("OVER")){
									TempBoardInfo.Board[1][0] = "0";
									TempBoardInfo.Board[1][1] = tString_1[0];
									TempBoardInfo.Board[1][2] = tString_1[1];
								}
								else if (tString_1[1].equals("OVER")){//OVER売あり
									TempBoardInfo.Board[1][0] = tString_1[0];
									TempBoardInfo.Board[1][1] = tString_1[1];
									TempBoardInfo.Board[1][2] = "0";
								}
							}
							else if(tString_1.length ==3){//両方注文あり？？　たぶん発生しない
								TempBoardInfo.Board[1][0] = tString_1[0];
								TempBoardInfo.Board[1][1] = tString_1[1];
								TempBoardInfo.Board[1][2] = tString_1[2];
							}
						}
						else if (j>2){	
							tString =e.getText();
							//ExtractedLog.FileWrite(tString.replace("\n", "\\n")+"	");
							tString_1 = tString.split("\n");
						
							if(TempBoardInfo.BuyIndex==0 && j<13 ){
								if(tString_1.length ==3){ //売あり　点が付いている
									if(tString_1[1].equals("・")||tString_1[1].equals("前")){
										TempBoardInfo.Board[j-1][0] = tString_1[0];
										TempBoardInfo.Board[j-1][1] = tString_1[2];
										TempBoardInfo.Board[j-1][2] = "0";
									}
									else if(tString_1[2].equals("・")||tString_1[2].equals("前")){
										TempBoardInfo.Board[j-1][0] = tString_1[0];
										TempBoardInfo.Board[j-1][1] = tString_1[1];
										TempBoardInfo.Board[j-1][2] = "0";
									}
									
									TempBoardInfo.BuyIndex = j-2;
								}
								else if(tString_1.length ==4) {//開始前　売買あり
									if(tString_1[1].equals("前")){
										TempBoardInfo.Board[j-1][0] = tString_1[0];
										TempBoardInfo.Board[j-1][1] = tString_1[2];
										TempBoardInfo.Board[j-1][2] = tString_1[3];
									}
									else if (tString_1[2].equals("前")) {
										TempBoardInfo.Board[j-1][0] = tString_1[0];
										TempBoardInfo.Board[j-1][1] = tString_1[1];
										TempBoardInfo.Board[j-1][2] = tString_1[3];
									}
									TempBoardInfo.BuyIndex = j-1;
								}
								else if(tString_1.length ==2){//売あり　
									TempBoardInfo.Board[j-1][0] = tString_1[0];
									TempBoardInfo.Board[j-1][1] = tString_1[1];
									TempBoardInfo.Board[j-1][2] = "0";
								}
								else{ //漲停
									TempBoardInfo.Board[j-1][0] = "0";
									TempBoardInfo.Board[j-1][1] = "0";
									TempBoardInfo.Board[j-1][2] = "0";
									
								}		
							}
							else{
								if(tString_1.length ==3){//買あり　点が付いている
									TempBoardInfo.SellIndex = j-2;
									TempBoardInfo.Board[j-1][0] = "0";
									TempBoardInfo.Board[j-1][1] = tString_1[0];
									TempBoardInfo.Board[j-1][2] = tString_1[1];
									//}	
								}
								else if (tString_1.length == 4){//開始前　売買あり
									TempBoardInfo.SellIndex = j-2;
									TempBoardInfo.Board[j-1][0] = "0";
									TempBoardInfo.Board[j-1][1] = tString_1[1];
									TempBoardInfo.Board[j-1][2] = tString_1[3];
									//}	
								}
								//if(j==19){
								//	TempBoardInfo.Board[j-2][0] = "0";
								//	TempBoardInfo.Board[j-2][1] = tString_1[1];
								//	TempBoardInfo.Board[j-2][2] = tString_1[2];
								//}
								else if(tString_1.length ==2){//買あり　
									TempBoardInfo.Board[j-1][0] = "0";
									TempBoardInfo.Board[j-1][1] = tString_1[0];
									TempBoardInfo.Board[j-1][2] = tString_1[1];
								}	
								else {//跌停
									TempBoardInfo.Board[j-1][0] = "0";
									TempBoardInfo.Board[j-1][1] = "0";
									TempBoardInfo.Board[j-1][2] = "0";
								}	
							}
							//System.out.println(BoardInfo.TempBoard[j-2][0] + "	"+BoardInfo.TempBoard[j-2][1]+ "	" +BoardInfo.TempBoard[j-2][2]);
						}
						j++;
					}
				//------------------------時価情報更新----------------------------------------
					TempBoardInfo.Price = driver_buy.findElement(By.xpath("//div[@id='xb-matrix']/div/div[3]/div/span[1]")).getText();
					
					TempBoardInfo.NetChange = driver_buy.findElement(By.xpath("//div[@id='xb-matrix']/div/div[3]/div[2]/span[1]")).getText();
					
					TempBoardInfo.NetChangePercent = driver_buy.findElement(By.xpath("//div[@id='xb-matrix']/div/div[3]/div[2]/span[2]")).getText();
					
					color = driver_buy.findElement(By.xpath("//div[@id='xb-matrix']/div/div[3]/div[2]/span[2]")).getCssValue("color");
					if(color.equals("rgba(0, 85, 255, 1)")){//minus
						TempBoardInfo.NetChange = "-"+TempBoardInfo.NetChange;
						TempBoardInfo.NetChangePercent = "-" + TempBoardInfo.NetChangePercent;
					}
					//ExtractedLog.FileWrite(TempBoardInfo.Price+"	");
					//ExtractedLog.FileWrite(TempBoardInfo.NetChange+"	");
					//ExtractedLog.FileWrite(TempBoardInfo.NetChangePercent+"	");
					
					//------------------------日経平均情報更新----------------------------------------
					TempBoardInfo.Shijyou = driver_buy.findElement(By.xpath("//div[@id='index-ticker']/div[2]/div/ul/li/span[1]")).getText();
					TempBoardInfo.ShijyouNetChange = driver_buy.findElement(By.xpath("//div[@id='index-ticker']/div[2]/div/ul/li/span[2]")).getText();
					color = driver_buy.findElement(By.xpath("//div[@id='index-ticker']/div[2]/div/ul/li/span[1]")).getCssValue("color");
					//System.out.println(color);
					if(color.equals("rgba(38, 50, 56, 1)")){//minus
						TempBoardInfo.ShijyouNetChange = TempBoardInfo.ShijyouNetChange;
					}
					else{
						TempBoardInfo.ShijyouNetChange ="-" +TempBoardInfo.ShijyouNetChange;
						
					}
					//ExtractedLog.FileWrite(TempBoardInfo.Shijyou+"	");
					//ExtractedLog.FileWrite(TempBoardInfo.ShijyouNetChange+"	");
				
				//------------------------更新完了時の----------------------------------------
					Date Now = new Date();
					TempBoardInfo.BoardTime = D.format(Now);
					TempBoardInfo.Board_flag=false;
					//ExtractedLog.FileWrite(TempBoardInfo.BoardTime+"\r\n");
					System.out.println( TempBoardInfo.BoardTime+ "	" + target );
					Now = null; 
					childs = null;
				}
			}
			}catch (VirtualMachineError e){
				 System.out.println(e);
			}
			

			System.out.println("BoardInformationExtractor END "+ target);
			BoardInformationExtractorState = "END";
		
				
		}	
	}
}
