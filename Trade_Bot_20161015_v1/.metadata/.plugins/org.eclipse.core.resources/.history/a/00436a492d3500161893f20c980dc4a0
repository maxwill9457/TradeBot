
import java.io.*;
import java.lang.Thread.UncaughtExceptionHandler;
import java.util.Calendar;

// develope version

public class Main {
	
	static int StartTime =80000;
	static int EndTime   = 150000;
	static String MeigaraName = "マイネット";
	static String LogPath = "D://invest//project//Trade_Bot_20160509//TradeBot//log//";
	static String SimulationMode = "OPERATION_SIMULATION";  //ONLINE                real data and operation
    //OPERATION_SIMULATION  real data but no actual operation execute 
    //TEST_DATA_SIMULATION  test data and no actual operation execute  
	
	static String TradeBotState ="STANDBY" ;
	
	public static void main(String[] args) {
		
		 Schedulor TradeBotSchedulor = new Schedulor();
		
		class CatchException implements UncaughtExceptionHandler {
			public void uncaughtException(Thread t, Throwable e) {
				System.out.println(t.getName());
			}
		}
		TradeUnit TradeUnit1;
		if(SimulationMode.equals("ONLINE")){
			TradeUnit1 = new TradeUnit(MeigaraName,SimulationMode, LogPath) ; //啟動新的股票交易單元
		}
		else{
			TradeUnit1 = new TradeUnit(MeigaraName,SimulationMode, LogPath+"Test//") ; //啟動新的股票交易單元
		}
		CatchException TradeUnit1_catchException = new CatchException();
		TradeUnit1.setName("Thread-TradeUnit1");
		TradeUnit1.setUncaughtExceptionHandler(TradeUnit1_catchException);
		
		while(!TradeUnit1.TradeUnitState.equals("READY")){
			try{
				Thread.sleep(1);
			}catch (InterruptedException e){
			}	
		}
		
		//System.out.println( "Select Mode" );
		//System.out.println( "1. Normal Mode" );
		//System.out.println( "2. Simulation Mode" );
		/*
		InputStreamReader in = new InputStreamReader(System.in);
		BufferedReader reader = new BufferedReader(in);
		String line;
		try{
			 line= reader.readLine();
		}catch (IOException e){
		}	
		
		switch(line){
		case "1": // Normal Mode
			break;
		case "2": // Simulation Mode
			break;
		
		try{
			Thread.sleep(1);
		}catch (InterruptedException e){
		}
		}	
		*/


		/*
		TradeUnit TradeUnit1 = new TradeUnit("マイネット") ; //啟動新的股票交易單元
		CatchException TradeUnit1_catchException;
		TradeUnit1_catchException = new CatchException();
		TradeUnit1.setName("Thread-TradeUnit1");
		TradeUnit1.setUncaughtExceptionHandler(TradeUnit1_catchException);
		
		while(!TradeUnit1.TradeUnitState.equals("READY")){
			try{
				Thread.sleep(1);
			}catch (InterruptedException e){
			}	
		}
		//System.out.println( "TradeUnit1 start" );
		TradeUnit1.start();
		/*
		TradeUnit TradeUnit2 = new TradeUnit("サイジニア") ; //啟動新的股票交易單元
		CatchException TradeUnit2_catchException;
		TradeUnit2_catchException = new CatchException();
		TradeUnit2.setName("Thread-TradeUnit2");
		TradeUnit2.setUncaughtExceptionHandler(TradeUnit2_catchException);
		
		while(!TradeUnit2.TradeUnitState.equals("READY")){
			try{
				Thread.sleep(1);
			}catch (InterruptedException e){
			}	
		}
		TradeUnit2.start();
		
		TradeUnit TradeUnit3 = new TradeUnit("FFRI") ; //啟動新的股票交易單元
		CatchException TradeUnit3_catchException;
		TradeUnit3_catchException = new CatchException();
		TradeUnit3.setName("Thread-TradeUnit3");
		TradeUnit3.setUncaughtExceptionHandler(TradeUnit3_catchException);
		
		while(!TradeUnit3.TradeUnitState.equals("READY")){
			try{
				Thread.sleep(1);
			}catch (InterruptedException e){
			}	
		}
		TradeUnit3.start();
		
		TradeUnit TradeUnit4 = new TradeUnit("テラスカイ") ; //啟動新的股票交易單元
		CatchException TradeUnit4_catchException;
		TradeUnit4_catchException = new CatchException();
		TradeUnit4.setName("Thread-TradeUnit4");
		TradeUnit4.setUncaughtExceptionHandler(TradeUnit4_catchException);
		
		while(!TradeUnit4.TradeUnitState.equals("READY")){
			try{
				Thread.sleep(1);
			}catch (InterruptedException e){
			}	
		}
		TradeUnit4.start();
		
		TradeUnit TradeUnit5 = new TradeUnit("エムケイシステム") ; //啟動新的股票交易單元
		CatchException TradeUnit5_catchException;
		TradeUnit5_catchException = new CatchException();
		TradeUnit5.setName("Thread-TradeUnit5");
		TradeUnit5.setUncaughtExceptionHandler(TradeUnit5_catchException);
		
		while(!TradeUnit5.TradeUnitState.equals("READY")){
			try{
				Thread.sleep(1);
			}catch (InterruptedException e){
			}	
		}
		TradeUnit5.start();
		/*
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	       
	    System.out.println("ENTERキーを押してください");
	    try{
	    	 System.in.read();
	    }catch(Exception e){
	    	 e.printStackTrace();
	    }
	    TradeUnit1.TradeUnitState ="FINISH"; 
	    TradeUnit2.TradeUnitState ="FINISH"; 
	    TradeUnit3.TradeUnitState ="FINISH";  
	    TradeUnit4.TradeUnitState ="FINISH"; 
	    TradeUnit5.TradeUnitState ="FINISH"; 
	   */
		while(!TradeBotState.equals("END") ){ //Wait for being triggered 
			TradeBotSchedulor.TradeBotSchedulor();
			System.out.println(TradeBotState);
			
			switch(TradeBotState){
			
			case "STANDBY":
				System.out.println("Tradebot_Standby");
				break;	
			case "START":
				if (TradeUnit1== null){

					if(SimulationMode.equals("ONLINE")){
						TradeUnit1 = new TradeUnit(MeigaraName,SimulationMode, LogPath) ; //啟動新的股票交易單元
					}
					else{
						TradeUnit1 = new TradeUnit(MeigaraName,SimulationMode, LogPath+"Test//") ; //啟動新的股票交易單元
					}
					TradeUnit1_catchException = new CatchException();
					TradeUnit1.setName("Thread-TradeUnit1");
					TradeUnit1.setUncaughtExceptionHandler(TradeUnit1_catchException);
					
					while(!TradeUnit1.TradeUnitState.equals("READY")){
						try{
							Thread.sleep(1);
						}catch (InterruptedException e){
						}	
					}
					System.out.println("Tradebot_New object");
				}
				else{
					System.out.println("Tradebot_exist object");
				}
				//System.out.println( "TradeUnit1 start" );
				TradeUnit1.start();	
				TradeUnit1.TradeUnitState = "START";
				TradeBotState = "RUN"; 
			
				break;
			case "RUN":
				System.out.println("Tradebot_run");
				break;
			case "FINISH":
				TradeUnit1.TradeUnitState = "FINISHING";
				while(!TradeUnit1.TradeUnitState.equals("END")){
					System.out.println("Tradebot_finishing");
					try{
						Thread.sleep(100);
					}catch (InterruptedException e){
					}
				}
				TradeUnit1=null;
				TradeBotState = "STANDBY";
			
				System.out.println("Tradebot_finished");
			
				break;
			case "ERROR":	
				break;
				
			}	
			try{
				Thread.sleep(500);
			}catch (InterruptedException e){
			}	
		}
		System.out.println("Main END");
		
	}	
	static class Schedulor{
		void TradeBotSchedulor( ){
			Calendar rightNow;

			rightNow = Calendar.getInstance();
			int tHour 	= rightNow.get(rightNow.HOUR_OF_DAY); // get hour
			int tMinute = rightNow.get(rightNow.MINUTE);
			int tSecond = rightNow.get(rightNow.SECOND);
		
			int indextime = tHour*10000+tMinute*100+tSecond;
			if(indextime<StartTime){ //standby　8時前
				TradeBotState = "STANDBY";
			}
			else if(indextime >= StartTime && indextime<=EndTime && TradeBotState.equals("STANDBY")){ // Trade preparing 8:00 to 9:00   Record-Active Action-Standy
				TradeBotState = "START";	
			}
			else if(indextime >= StartTime && indextime<=EndTime && TradeBotState.equals("RUN")){ // Trade preparing 8:00 to 9:00   Record-Active Action-Standy
				TradeBotState = "RUN";	
			}
			else if (indextime>EndTime && TradeBotState.equals("RUN")){ // Trade Finished 15:00  Record-Standby Action-Standby
				TradeBotState = "FINISH";
			}
			
			//else if(indextime >= StartTime+30 && indextime<=EndTime+30 && TradeBotState.equals("STANDBY")){ // Trade preparing 8:00 to 9:00   Record-Active Action-Standy
			//	TradeBotState = "START";	
			//}
			//else if(indextime >= StartTime+30 && indextime<=EndTime+30 && TradeBotState.equals("RUN")){ // Trade preparing 8:00 to 9:00   Record-Active Action-Standy
			//	TradeBotState = "RUN";	
			//}
			//else if (indextime>EndTime+30 && TradeBotState.equals("RUN")){ // Trade Finished 15:00  Record-Standby Action-Standby
			//	TradeBotState = "FINISH";
			//}

		 }
		
	}
}



		

	