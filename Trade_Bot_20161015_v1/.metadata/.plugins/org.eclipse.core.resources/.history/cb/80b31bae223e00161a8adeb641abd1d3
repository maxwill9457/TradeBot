
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.ChartUtilities;

import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;


public class ShowMeigaraTimechart extends ApplicationFrame {
	String ProcessName = "ShowMeigaraTable";
	/** The time series data. */
	private TimeSeries series_Price;
	private TimeSeries series_Avg;
	private TimeSeries series_Board;
	    

	/** The most recent value added. */
	private double lastPrice;
	private double Average;
	    
	JFreeChart chart;
	JFreeChart chart1;
	    
	LogUnit ErrorLog;
	    

	/**
	 * Constructs a new demonstration application.
	  *
	  * @param title  the frame title.
	  */
	public ShowMeigaraTimechart(final String title , final String Date, final String time, LogUnit ErrorLog) {

	    
	    super(title);
	    String SubProcessName = "Initiation";
	    this.ErrorLog = ErrorLog;
	    try{
	        
	    	this.series_Price = new TimeSeries("Stock Data", Millisecond.class);
	        this.series_Avg = new TimeSeries("Average Data", Millisecond.class);
	        this.series_Board = new TimeSeries("Board Data", Millisecond.class);
	        
	        final TimeSeriesCollection dataset = new TimeSeriesCollection(this.series_Price);
	        final TimeSeriesCollection Board_dataset = new TimeSeriesCollection(this.series_Board);
	        dataset.addSeries(this.series_Avg);
	        
	        chart = createChart(dataset);
	        chart1 = createChart(Board_dataset);
	        //chart1 = createChart(Board_dataset);
	        
	        final ChartPanel chartPanel = new ChartPanel(chart);
	        final ChartPanel chartPanel1 = new ChartPanel(chart1);
	        final JPanel content = new JPanel(new BorderLayout());
	        
	        content.add(chartPanel);
	        content.add(chartPanel1,BorderLayout.SOUTH);
	   
	        chartPanel.setPreferredSize(new java.awt.Dimension(1000, 540));
	        chartPanel1.setPreferredSize(new java.awt.Dimension(1000, 540));
	        setContentPane(content);
	    }catch(Exception e){
			System.out.println( e);
			ErrorLogWrite(ProcessName,SubProcessName, e.toString() );
		}
	}

	    /**
	     * Creates a sample chart.
	     * 
	     * @param dataset  the dataset.
	     * 
	     * @return A sample chart.
	     */
	private JFreeChart createChart(final XYDataset dataset) {
	    final JFreeChart result = ChartFactory.createTimeSeriesChart(
	        "Dynamic Data Demo", 
	        "Time", 
	        "Value",
	        dataset, 
	        true, 
	        true, 
	        false
	    );
	    final XYPlot plot = result.getXYPlot();
	    ValueAxis domainAxis  = plot.getDomainAxis();
	    domainAxis .setAutoRange(true);
	        
	    //long maxMargin = (long)axis.getUpperBound();
	    //axis.setRangeWithMargins(maxMargin-86400000.0, maxMargin);
	    domainAxis.setFixedAutoRange(25200000.0);  // 60 seconds
	        
	    ValueAxis rangeAxis  = plot.getRangeAxis();
	        
	    //double  rangetick = 1D;
	        
	    //rangeAxis.setStandardTickUnits(new NumberTickUnit(rangetick));
	       
	    rangeAxis .setAutoRange(true);
	   // rangeAxis.setRange(3000.0, 5000.0); 
	    
	    return result;
	}
	  
	public void TimechartRenew(final double Price, final double Average, String Date, String Time) {
		try{
	    	this.lastPrice = Price;
	    	this.Average   = Average;
	    	System.out.println("Date = " + Date+ " Time = " + Time );
	    	int Year = Integer.valueOf(Date.substring(0,4));
	    	int Month = Integer.valueOf(Date.substring(5,7));
	    	int Day = Integer.valueOf(Date.substring(8,10));
	    	
	    	int Hour = Integer.valueOf(Time.substring(0,2));
	    	int Minute = Integer.valueOf(Time.substring(3,5));
	    	int Second = Integer.valueOf(Time.substring(6,8));
	    	int Millisecond = 0;
	    	//int Millisecond = Integer.valueOf(Time.substring(9,12));
	    	
	    	final Millisecond now = new Millisecond(Millisecond,Second,Minute,Hour,Day,Month,Year);
	    	System.out.println("Now = " + now.toString());
	        
	    	//this.series_Price.add(now, this.lastPrice);
	    	//this.series_Avg.add(now, this.Average);
	    	this.series_Price.addOrUpdate(now, this.lastPrice);
	    	this.series_Avg.addOrUpdate(now, this.Average);
	    		
	    }catch(Exception e){
	    	 System.out.println("timechart renew error = " + e);
	    		
	    }
	}
	    
	public void TimechartSave(String LogPath, String FileName ){
		File file = new File(LogPath+"chart//"+FileName+".jpeg");
		try {
			ChartUtilities.saveChartAsJPEG(file, chart, 1000, 540);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	void ErrorLogWrite(String ProccessName, String SubProcessName , String Error){
		Calendar rightNow;
		Date Now = new Date();
	    SimpleDateFormat D = new SimpleDateFormat("yyyy/MM/dd	HH:mm:ss.SSS");
	    rightNow = Calendar.getInstance();
		Now = rightNow.getTime();
			
		String temp =  D.format(Now) + "	" + ProccessName + "	" + SubProcessName + "	" +Error +"\r\n";
		ErrorLog.FileWrite(temp);
			
	}    	    
}
	
