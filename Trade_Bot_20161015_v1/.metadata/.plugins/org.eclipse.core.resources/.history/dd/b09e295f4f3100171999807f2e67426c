import java.util.*;
import java.util.List;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.text.*;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;

import java.io.IOException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;


public class TradeOperatorUnit extends DefinedData{// 意思決定   Trade情報により、買、維持、売の行動　また価格を決める

	String ProcessName = "TradeOperatorUnit";
	String SimulationMode;    	  	//ONLINE            	real schedule, real data,  and operation
									//OPERATION_SIMULATION  real schedule, real data, no actual operation execute 
									//OFFLINE_SIMULATUION   test schedule,　real data,  no actual operation execute 
									//TEST_DATA_SIMULATION  test schedule,　test data and no actual operation execute   
	
	String TradeOperatorUnitState;// TradeOperatorUnitのスレッド状態
	String OrderAgentUnitState;// TradeOrderAgentのスレッド状態
	String MonitorAgentUnitState;// TradeMonitorAgentのスレッド状態
	
	
	//UserAction OperatorAction;
	
	String OperatorState;// オペレータの状態  BUY SELL CHANCEL STANDBY  
	String OrderState;//注文状況 BUYING SELLING CHANCELING STANDBY  
	String MonitorState;//監視状況
	
	String target;
	String target_num;
	

	String ADDRESS = "https://www.monex.co.jp/Login/00000000/login/ipan_web/hyoji";
	String HoldingStockPath ;
	
	BoardInfo BoardInfo;
	UserProperty UserProperty;
	TradeStatics TradeStatics;
	
	FirefoxProfile profile_order 			= new FirefoxProfile(new File("D:\\temp"));  
	FirefoxProfile profile_monitor_Order 	= new FirefoxProfile(new File("D:\\temp")); 
	FirefoxProfile profile_monitor_Property = new FirefoxProfile(new File("D:\\temp")); 
	
	WebDriver driver_order 				= new FirefoxDriver(profile_order);
	WebDriver driver_monitor_Order 		= new FirefoxDriver(profile_monitor_Order);
	WebDriver driver_monitor_Property 	= new FirefoxDriver(profile_monitor_Property );
	
	OrderAgentUnit OrderAgentUnit;
	CatchException OrderAgentUnit_catchException;
	
	OrderMonitorUnit OrderMonitorUnit;
	CatchException OrderMonitorUnit_catchException;
	
	File HoldingStockFileSet = null; //simulation 用ファイルの集合
    File[] HoldingStockFileList; //simulation用ファイルリスト
    BufferedReader FileDataBuffer; 
    

	OrderPanelUnit OrderPanelUnit;
	
	LogUnit HoldingstockLog;
	LogUnit TradeOperatorLog; // Command_Index  時間　Userアクション	値段	Operatorアクション	値段　OperatorState	
	LogUnit ErrorLog;
	
	Date Now = new Date();
	
	TradeOperatorUnit(String target,String target_num,BoardInfo BoardInfo, UserProperty UserProperty,TradeStatics TradeStatics,LogUnit ErrorLog,String SimulationMode,String LogPath, int Speed){
		
		String SubProcessName = "Initiation";
		TradeOperatorUnitState = "PREPARE";
		System.out.println( target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Activating" );
		
		this.SimulationMode = SimulationMode;
		this.target = target;
		this.target_num	= target_num;
		this.ErrorLog = ErrorLog;
		
		this.BoardInfo = BoardInfo;
		this.UserProperty = UserProperty;
		
		OrderPanelUnit = new OrderPanelUnit(UserProperty);
		
		//-----------OperatorAction 初期化--------------
		//this.NewOrder = false;
		//this.OperatorAction = new UserAction();
		//this.OperatorAction.ActionIndex = 0;
		//this.OperatorAction.Action[0] = "STANDBY";
		//this.OperatorAction.Action[1] = "";
		//this.OperatorAction.target = target;
		//--------------------------------------------
				
		this.OperatorState	= "STANDBY";//オペレータの状態
		this.OrderState		= "STANDBY";//注文状況
		this.MonitorState	= "STANDBY";//監視状況
		

		HoldingStockPath = LogPath+"TradeOperatorUnit//HoldingStock//";	
		
		TradeOperatorLog = new LogUnit(LogPath+"TradeOperatorUnit//trade//",this.target+"_TradeOperator",0); // create log file

		
		
		
		//---------------モニターユニットを生成---------------------
			this.OrderMonitorUnit = new OrderMonitorUnit(target,target_num,driver_monitor_Order,driver_monitor_Property,UserProperty,TradeStatics,ErrorLog,SimulationMode,LogPath,Speed);
			OrderMonitorUnit_catchException = new CatchException();
			OrderMonitorUnit.setName("Thread-BoardInfoExtractor-"+target);
			OrderMonitorUnit.setUncaughtExceptionHandler(OrderMonitorUnit_catchException);
		//if(SimulationMode.equals("ONLINE")||SimulationMode.equals("OPERATION_SIMULATION")){ 
			OrderMonitorUnit.start();	
		//}
		//---------------購入ユニットを生成---------------------
		this.OrderAgentUnit = new OrderAgentUnit(target,target_num,driver_order,UserProperty,OrderMonitorUnit.MonitoringOrderInfo,TradeStatics,ErrorLog,SimulationMode,LogPath,Speed);
		OrderAgentUnit_catchException = new CatchException();
		OrderAgentUnit.setName("Thread-BoardInfoExtractor-"+target);
		OrderAgentUnit.setUncaughtExceptionHandler(OrderAgentUnit_catchException);
		OrderAgentUnit.start();
		
		//---------------所持株の情報取得----------------------
		
		//LoadHoldingStockInfoLoader(HoldingStockPath);
		
		//------------------------------------------------
		
		
		TradeOperatorUnitState = "READY";
		System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Ready" );	
	}
	
	public void run(){ 
		String SubProcessName = "Main_Loop ";
		System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Standby" );
		String PreState = TradeOperatorUnitState;
		Calendar rightNow;
		
		while(!TradeOperatorUnitState.equals("END")){
			switch(TradeOperatorUnitState){
			
			case "READY":		
				break;	
			case "START":	
				if (PreState.equals("READY")){
					//初回のプロセスの起動に使う
					PreState = TradeOperatorUnitState;
					if(SimulationMode.equals("ONLINE")||SimulationMode.equals("OPERATION_SIMULATION")){ 
						OrderAgentUnit.OrderAgentUnitState ="START";
						OrderMonitorUnit.MonitorAgentUnitState ="START";
					}
					else if(SimulationMode.equals("OFFLINE_SIMULATUION")||SimulationMode.equals("TEST_DATA_SIMULATION")){
						OrderAgentUnit.OrderAgentUnitState ="START";
					}
					
					System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Start");
				}	
				
				AgentStateCheck(OrderAgentUnit.OrderState);//OrderAgentの状態確認しOperatorStateを更新
				
				if(UserProperty.UserAction.ActionIndex != OrderAgentUnit.OrderAgentAction.ActionIndex){
					//UserProperty.Actionから更新がある場合、OperatiorActionの判断を行う	
					System.out.println( UserProperty.UserAction.ActionIndex+"	" +OrderAgentUnit.OrderAgentAction.ActionIndex );
					
					//現在の注文状況を確認し、新注文指示に対して行動を決める
					String TempOrderAgentAction = ActionDecision(UserProperty,OrderAgentUnit.OrderAgentAction);
					//OrderAgentにだす行動指示に対して、残金や操作株数の上限について確認する
					if (!TempOrderAgentAction.equals("NoAction")&&!TempOrderAgentAction.equals("Error")){
						PropertyCheck(TempOrderAgentAction,UserProperty.UserAction.Price,target);
					}
					//金額に問題が無いのでOrderAgentにだす行動指示に出す
					if (!TempOrderAgentAction.equals("NoAction")&&!TempOrderAgentAction.equals("Error")){
						synchronized (UserProperty.UserAction.ActionLock){
							ActionExec(TempOrderAgentAction,UserProperty,OrderAgentUnit.OrderAgentAction); //意思決定からのアクションとオペレータ現在の状態でアクションを決める
						//OperatorState = "BUYING" "SELLING" /;
						}
					}
				}
				else{
					//NoAction Errorの場合はスルー
					TradeOperatorLogWrite(SubProcessName,"I","新注文指示が無い Standby",UserProperty);	;
					System.out.println( "Indexの変更がない" );
				}
				
				try{
					Thread.sleep(1000);
				}catch (InterruptedException e){
				}	
				
				//System.out.println( target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Start");
				break;
			case "PAUSE":
				//System.out.println( "TradeOperatorUnit PAUSE");
				break;
			case "FINISHING":
				//---------------気配板プロセスの完了待つ-----------------------------	
				OrderAgentUnit.OrderAgentUnitState = "FINISHING";
				while(!OrderAgentUnit.OrderAgentUnitState.equals("END")){
					try{
						Thread.sleep(10);
					}catch (InterruptedException e){
					}
				}
				OrderMonitorUnit.MonitorAgentUnitState = "FINISHING";
				while(!OrderMonitorUnit.MonitorAgentUnitState.equals("END")){
					try{
						Thread.sleep(10);
					}catch (InterruptedException e){
					}
				}
				//System.out.println( "TradeOperatorUnit FINISH");
				TradeOperatorUnitState = "END";
				break;
			case "ERROR":	
				//System.out.println( "TradeOperatorUnit ERROR");
				break;
				
			}	
			try{
				Thread.sleep(500);
			}catch (InterruptedException e){
			}	
		}		
		System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"End" );
		//start any web access process 
	}

	void LoadHoldingStockInfoLoader(String HoldingStockPath) {	
		//---------------------特定所持株の情報を抽出 ------------------------------------------------------
		String SubProcessName = "LoadHoldingStockInfoLoader";	
		try{
			HoldingStockFileSet = new File(HoldingStockPath);
			HoldingStockFileList = HoldingStockFileSet.listFiles();  //ディレクトリ配下のすべてのファイルを読み込む
		    	
			for (int i = 0; i < HoldingStockFileList.length; i++) {
				File file = HoldingStockFileList[i];
		    	System.out.println((i + 1) + ":    " + file);
			}
			FileDataBuffer = new BufferedReader(new FileReader(HoldingStockFileList[1])); //9用確認
		    	
		}catch(Exception e){
		  	System.out.println("DataFileLoader error" );
		   	e.printStackTrace();
		   	ErrorLogWrite(ProcessName, SubProcessName , e.toString());
	   }
		//---------------------特定株のファイル情報のみ取得------------------------------------------
		
		
		
		
		
		//-------------------------------------------------------------------------------------
		
	   System.out.println(target+ "	"+ProcessName+"_"+SimulationMode+"_"+"DataFileLoading_Finished" );
	
		
		//---------------------------------------------------------------------------------
	}
	
	void AgentStateCheck(String OrderState){ //OrderAgent、MonitorAgentの状態を更新
		String SubProcessName = "AgentCheck";
		String Action;
		
		if(	OrderState.equals("BUYING")){ // Agentの状態が発注中になったらoperatorの状態を待機状態から購買中に変更
			if(OperatorState.equals("WAIT_AGENT_BUY") || OperatorState.equals("WAIT_AGENT_BUY_PRICE_CHANGE") ){
				OperatorState = "BUYING";
			}
		}
		if(OrderState.equals("SELLING")){ // Agentの状態が販売中になったらoperatorの状態を待機状態から販売中に変更
			if(	OperatorState.equals("WAIT_AGENT_SELL") || OperatorState.equals("WAIT_AGENT_SELL_PRICE_CHANGE")){
				OperatorState = "SELLING";
			}
		}
		if(OrderState.equals("CHANCELLING")){// Agentの状態が取消中になったらoperatorの状態を待機状態から取消中に変更
			if(	OperatorState.equals("WAIT_AGENT_CHANCEL")){
				OperatorState = "CHANCELLING";
			}
		}
		
		if( OrderAgentUnit.OrderState.equals("FINISHED")){// Agentの注文が完了したら、operatorの状態を初期状態に戻す。
			OperatorState = "STANDBY";
			
		}
	
	}
	
	String ActionDecision(UserProperty UserProperty, UserAction OrderAgentAction ){ //OrderAgent、MonitorAgentの状態を更新
		String SubProcessName = "OrderActionCheck";
		UserAction tempAction = UserProperty.UserAction;
		
		if(tempAction.Action[0].equals("BUY")){
			if(OperatorState.equals("BUYING")){
				if (OrderAgentAction.Price.compareTo(tempAction.Price) != 0){ 
				//値段が違うため発注変更
					return "ChangeBuyPrice";
				}
				else{
					//金額同様のためアクションなし
					OrderAgentAction.ActionIndex= tempAction.ActionIndex;
					String Msg = "UserActionが現在買い中値段と同様："+ UserProperty.UserAction.Price.toString();
					System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+Msg );
					TradeOperatorLogWrite(SubProcessName,"W",Msg,UserProperty);	
					return "NoAction";
				}
			}
			else if(OperatorState.equals("SELLING")){
				//売りが買いに変更、現在の売りを一旦キャンセルして買う
				return "ChangeOrderSelltoBuy";
	
			}
			else if(OperatorState.equals("STANDBY")){
				//現在特に行動していないため、そのまま発注
				return "BuyOrder";
			}
			else if(OperatorState.equals("WAIT_AGENT_BUYING")||OperatorState.equals("WAIT_AGENT_SELLING")){
				//待機中なので行動をしない
				return "BuyOrder";
			}
			else{
				//想定外の状態
				String Msg = "OperatorState想定外の状態："+OperatorState;
				System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+Msg );
				TradeOperatorLogWrite(SubProcessName,"E",Msg,UserProperty);	
				return "Error";
			}
		}
		else if(tempAction.Action[0].equals("SELL")){
			if(OperatorState.equals("BUYING")){
				//売りが買いに変更、現在の発注を一旦キャンセルして売る
				return "ChangeOrderBuytoSell";
			}
			else if(OperatorState.equals("SELLING")){
				if (OrderAgentAction.Price.compareTo(tempAction.Price) != 0){ 
					//値段が違うため発注変更	
					return "ChangeSellPrice";
				}
				else{
					//金額同様のためアクションなし
					OrderAgentAction.ActionIndex= tempAction.ActionIndex;
					String Msg = "UserActionが現在売り中値段と同様："+ UserProperty.UserAction.Price.toString();
					System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+Msg );
					TradeOperatorLogWrite(SubProcessName,"W",Msg,UserProperty);	
					return "NoAction";
				}
			}
			else if(OperatorState.equals("STANDBY")){
				//現在特に行動していないため、そのまま発注
				return "SellOrder";
			}
			else if(OperatorState.equals("WAIT_AGENT_BUYING")||OperatorState.equals("WAIT_AGENT_SELLING")){
				//待機中なので行動をしない
				return "SellOrder";
			}

			else{
				//想定外の状態	
				String Msg = "OperatorState想定外の状態："+OperatorState;
				System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+Msg );
				TradeOperatorLogWrite(SubProcessName,"E",Msg,UserProperty);	
				return "Error";
			}
			
		}else{
			String Msg = "UserProperty.UserAction想定外のアクション："+UserProperty.UserAction.Action[0]+"	"+UserProperty.UserAction.Action[1];
			System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+Msg );
			TradeOperatorLogWrite(SubProcessName,"E",Msg,UserProperty);	
			return "Error";
		}	
		
	}
	Boolean PropertyCheck(String TempOrderAgentAction,BigDecimal OrderingPrice,String target){//エージェントの実行行動を決定する   OrderingPrice：現在購買中に預かる金額
		String SubProcessName = "TradeOrder_PropertyCheck ";
		
		switch(TempOrderAgentAction){
		case "ChangeBuyPrice":
			break;
		case "ChangeOrderSelltoBuy":
			break;
		case "BuyOrder":
			break;
		case "ChangeOrderBuytoSell":
			break;
		case "ChangeSellPrice":
			break;
		case "SellOrder":
			break;	
		}
		
		return true;
	
	}
	
	void ActionExec(String TempOrderAgentAction,UserProperty UserProperty, UserAction OrderAgentAction ){ //意思決定からのアクションとオペレータ現在の状態でアクションを決める
		
		String SubProcessName = "ActionDecision";
		UserAction tempAction = UserProperty.UserAction;	
		
		String Msg;
		switch(TempOrderAgentAction){
		case "ChangeBuyPrice":
			// 買いに変更する
			OrderAgentAction.Action[0] = "CHANGE_BUY";   
			OrderAgentAction.Action[1] = "";
			OrderAgentAction.ActionNum =1;
			OrderAgentAction.ActionIndex = tempAction.ActionIndex;
			OrderAgentAction.Price = tempAction.Price;
			OrderAgentAction.OrderStockNum = tempAction.OrderStockNum;
			OrderAgentAction.NewOrder = true;
			
			Msg="買い中OrderAgentに買い金額変更指示："+OrderAgentAction.Price.toString()+"に変更" ;
			System.out.println( OrderAgentAction.ActionIndex + Msg );
			TradeOperatorLogWrite(SubProcessName,"I",Msg,UserProperty);					
			OperatorState = "WAIT_AGENT_BUY";
			
			break;
		case "ChangeOrderSelltoBuy":
			//
			OrderAgentAction.Action[0] = "CHANCEL";
			OrderAgentAction.Action[1] = "BUY";
			OrderAgentAction.ActionNum =2;
			OrderAgentAction.ActionIndex= tempAction.ActionIndex;
			OrderAgentAction.Price = tempAction.Price;
			OrderAgentAction.OrderStockNum = tempAction.OrderStockNum;
			OrderAgentAction.NewOrder = true;
			
			Msg="売り中OrderAgentに買い変更指示：買い"+OrderAgentAction.Price.toString()+"に変更";
			System.out.println( OrderAgentAction.ActionIndex + Msg );
			TradeOperatorLogWrite(SubProcessName,"I",Msg,UserProperty);				
			OperatorState = "WAIT_AGENT_BUY_PRICE_CHANGE";
			
			break;
		case "BuyOrder":
			OrderAgentAction.Action[0] = "BUY";
			OrderAgentAction.Action[1] = "";
			OrderAgentAction.ActionNum =1;
			OrderAgentAction.ActionIndex= tempAction.ActionIndex;
			OrderAgentAction.Price = tempAction.Price;
			OrderAgentAction.OrderStockNum = tempAction.OrderStockNum;
			OrderAgentAction.NewOrder = true;
			
			Msg="待機中OrderAgentに買い指示："+OrderAgentAction.Price.toString()+"に変更";
			System.out.println( OrderAgentAction.ActionIndex + Msg );
			TradeOperatorLogWrite(SubProcessName,"I",Msg,UserProperty);				
			OperatorState = "WAIT_AGENT_BUY";

			break;
		case "ChangeOrderBuytoSell":
			OrderAgentAction.Action[0] = "CHANCEL";
			OrderAgentAction.Action[1] = "SELL";
			OrderAgentAction.ActionNum =2;
			OrderAgentAction.ActionIndex= tempAction.ActionIndex;
			OrderAgentAction.Price = tempAction.Price;
			OrderAgentAction.OrderStockNum = tempAction.OrderStockNum;
			OrderAgentAction.NewOrder = true;
				
			Msg="買い中OrderAgentに売り変更指示："+OrderAgentAction.Price.toString() + "に変更";
			System.out.println( OrderAgentAction.ActionIndex + Msg );
			TradeOperatorLogWrite(SubProcessName,"I",Msg,UserProperty);				
			OperatorState = "WAIT_AGENT_SELL";
			
			
			break;
		case "ChangeSellPrice":
			OrderAgentAction.Action[0] = "CHANGE_SELL";
			OrderAgentAction.Action[1] = "";
			OrderAgentAction.ActionNum =1;
			OrderAgentAction.ActionIndex= tempAction.ActionIndex;
			OrderAgentAction.Price = tempAction.Price;
			OrderAgentAction.OrderStockNum = tempAction.OrderStockNum;
			OrderAgentAction.NewOrder = true;
			
			Msg=" SELLINGの状態で新規SELLで新注文値段" +OrderAgentAction.Price.toString()+ "に変更";
			System.out.println( OrderAgentAction.ActionIndex + Msg );
			TradeOperatorLogWrite(SubProcessName,"I",Msg,UserProperty);			
			OperatorState = "WAIT_AGENT_SELL_PRICE_CHANGE";

			break;
		case "SellOrder":
			OrderAgentAction.Action[0] = "SELL";
			OrderAgentAction.Action[1] = "";
			OrderAgentAction.ActionNum =1;
			OrderAgentAction.ActionIndex= tempAction.ActionIndex;
			OrderAgentAction.Price = tempAction.Price;
			OrderAgentAction.OrderStockNum = tempAction.OrderStockNum;
			OrderAgentAction.NewOrder = true;
				
			Msg = " 待機状態で新規SELL　　売り値段" +OrderAgentAction.Price.toString()+ "に入る ";
			System.out.println( OrderAgentAction.ActionIndex + Msg );
			TradeOperatorLogWrite(SubProcessName,"I",Msg,UserProperty);	
			OperatorState = "WAIT_AGENT_SELL";
			break;	
		}
		
		
	}
	
	public class OrderAgentUnit extends DefinedData{
		String SimulationMode ;
		String target;   // 注文銘柄
		String target_num;//注文銘柄株数
		String OrderAgentUnitState = "STANDBY";
		String OrderState = "STANDBY";//注文状況
		
		LogUnit OrderAgentLog;  // Trade operation log
		LogUnit ErrorLog;
		UserProperty UserProperty;
		
		OrderInfo OrderInfo;
		OrderInfo[] MonitorOrderInfo;
		
		boolean NewOrder;
		UserAction OrderAgentAction;
		
		OrderAgentUnit(String target,String target_num,WebDriver driver_order, UserProperty UserProperty,OrderInfo[] MonitorOrderInfo,TradeStatics TradeStatics,LogUnit ErrorLog,String SimulationMode,String LogPath, int Speed){

			String SubProcessName = "OrderAgent_Initiation";
			OrderAgentUnitState = "PREPARE";
			System.out.println( target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Activating" );
			
			this.SimulationMode = SimulationMode;
			this.target = target;
			this.target_num = target_num;
			this.ErrorLog = ErrorLog;
			this.UserProperty = UserProperty;
			this.MonitorOrderInfo = MonitorOrderInfo;
			
			this.NewOrder =false;
			this.OrderAgentAction = new UserAction();
			this.OrderInfo = new OrderInfo();
			
			TradeOrderPageOpen(driver_order);//株取引ページの用意

			this.OrderAgentLog = new LogUnit(LogPath+"trade//",this.target+"OrderAgent",0); // create log file

			OrderAgentUnitState = "READY";
			System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Ready" );
		}
			
		public void run(){ 
			String SubProcessName = "OrderAgent_Main_Loop ";
			System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Standby" );
			String PreState = OrderAgentUnitState;
			Calendar rightNow;
			
			while(!OrderAgentUnitState.equals("END")){
				switch(OrderAgentUnitState){
				
				case "READY":
					break;	
				case "START":	
					if (PreState.equals("READY")){
						//初回のプロセスの起動に使う
						PreState = OrderAgentUnitState;
						System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Start");
					}	
					
					try{
						Thread.sleep(10);
					}catch (InterruptedException e){
					}	
					ChangeCheck();//TradeMonitoringUnitの状態確認
					//ActionCheck(OrderAgentAction,NewOrder); //エージェントの状態を更新する
					if(OrderAgentAction.NewOrder){
						//PropertyCheck();//エージェントの購買力を確認する
						OrderActionExec(driver_order, OrderAgentAction,OrderInfo,MonitorOrderInfo);//注文アクションを実行する
						OrderAgentAction.NewOrder =false;
					}
					System.out.println( target+ "	"
							+ ""+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Start");
					break;
				case "PAUSE":
					//System.out.println( "TradeOperatorUnit PAUSE");
					break;
				case "FINISHING":
					//System.out.println( "TradeOperatorUnit FINISH");
					OrderAgentUnitState = "END";
					break;
				case "ERROR":	
					//System.out.println( "TradeOperatorUnit ERROR");
					break;
					
				}	
				try{
					Thread.sleep(500);
				}catch (InterruptedException e){
				}	
			}		
			System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"End" );
			//start any web access process 
		}
		void TradeOrderPageOpen(WebDriver driver_order){
			String SubProcessName = "TradeOrder_PageOpen ";
			driver_order.get(ADDRESS);
			Login(driver_order, UserProperty.USER_NAME, UserProperty.PASSWORD);	
			driver_order.findElement(By.xpath("//*[@id='global-navi']/div[2]/ul/li[2]/a")).click();;//株式取引ページに移動
		}	
		void ChangeCheck(){//TradeMonitoringUnitの状態確認
			String SubProcessName = "TradeOrder_ChangeCheck ";
			
			//--------------テストモードの場合　2秒後に注文したものの内容を完了とする。--------------
			
			
			
		}


		void OrderActionExec(WebDriver driver_order, UserAction OrderAction, OrderInfo OrderInfo,OrderInfo[] MonitorOrderInfo) {
			
			String SubProcessName = "OrderActionExec ";
			int error;
			
			//--------------テストモードの場合　実際に画面操作はしない--------------
			
			for(int i=0;i<OrderAction.ActionNum;i++){ //Actionの数で複数実行
				if(OrderAction.Action[i].equals("BUY")){
					error = BuyActionExec(driver_order, OrderAction, OrderInfo,MonitorOrderInfo);//注文操作実行
					if(error == 0){
						OrderState = "BUYING";
					}
					else{
						OrderState = "ERROR";
					}	
				}
				else if(OrderAction.Action[i].equals("SELL")){
					error =SellActionExec(driver_order, OrderAction ,MonitorOrderInfo);//売却操作実行
					if(error == 0){
						OrderState = "SELLING";
					}
					else{
						OrderState = "ERROR";
					}
				}
				else if(OrderAction.Action[i].equals("CHANGE_BUY")||OrderAction.Action[i].equals("CHANGE_SELL")){
					error =OrderChangeExec(driver_order, OrderAction, OrderInfo,MonitorOrderInfo);//値段変更操作実行
					if(error == 0){
						if(OrderAction.Action[i].equals("CHANGE_BUY")){
							OrderState = "BUYING";
						}
						if(OrderAction.Action[i].equals("CHANGE_SELL")){
							OrderState = "SELLING";
						}
					}
					else{
						OrderState = "ERROR";
					}
				}
				else if(OrderAction.Action[i].equals("CHANCEL")){
					error =OrderCancelExec(driver_order, OrderAction, OrderInfo,MonitorOrderInfo);//注文取消操作実行
					if(error == 0){
						OrderState = "CHANCELLING";
					}
					else{
						OrderState = "ERROR";
					}
				}
				else if(OrderAction.Action[i].equals("")){
				// アクションが無いときはアクションなしで
				}
				else{
					System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"End" );
					ErrorLogWrite(ProcessName,SubProcessName,"unknown OrderAction state	"+OrderAction.Action[i]);
					OrderAgentLogWrite("E","株注文失敗："+SubProcessName,OrderInfo);
				}
			}
				
		}		
		int BuyActionExec(WebDriver driver_order, UserAction OrderAction,OrderInfo OrderInfo,OrderInfo[] MonitorOrderInfo) {	
			String SubProcessName = "TradeOrder_BuyActionExec ";
			int returnFlag=0;
			
			//注文値段をチェックする必要がある
			
			//
			if(SimulationMode.equals("ONLINE")||SimulationMode.equals("OPERATION_SIMULATION")){ 
			//---------------------実際に操作する場合-------------------------------------------------------------
				try{
			//---------------------注文ページに移動し発注する------------------------------------------------------
					driver_order.findElement(By.xpath("//*[@id='global-navi']/div[2]/ul/li[2]/a")).click();//株式取引ページに移動
					driver_order.findElement(By.xpath("//*[@id='focuson']")).sendKeys(target_num); //株式取引→銘柄記入
					driver_order.findElement(By.xpath("//*[@id='gn_service-']/div[6]/div[2]/div/div/div[1]/div[1]/div[1]/div[2]/dl[1]/dd/form/p[2]")).click();;//注文ページに移動
					driver_order.findElement(By.xpath("//*[@id='orderNominal']")).sendKeys("100"); //買い注文　→株数記載
					driver_order.findElement(By.xpath("//*[@id='form01']/div[3]/div[1]/div[1]/table/tbody/tr[5]/td/div[2]/span/label")).click();//買い注文　→　指値
					driver_order.findElement(By.xpath("//*[@id='idOrderPrc']")).sendKeys(OrderAction.Price.toString()); //買い注文　→金額記載
			
			//----------------------------注文実行--------------------------------------------
					driver_order.findElement(By.xpath("//*[@id='form01']/div[3]/div[1]/div[2]/div/input")).click();//買い注文（次へ）
					driver_order.findElement(By.xpath("//*[@id='gn_service-lm_buy']/div[7]/div[1]/form/div/div[1]/div[1]/div[2]/div[2]/input")).click();//内容確認　買い実施
			//-------------------------------------------------------------------------------
				
					OrderInfo.StockName = target;	//株名
					OrderInfo.StockSeriesNum = target_num;//株シリアル番号
					OrderInfo.Ordertype = "BUY" ;//発注内容　BUY SELL
					OrderInfo.OrderPrice = OrderAction.Price.toString();//発注金額
					OrderInfo.OrderNum = "100";//発注数
					OrderInfo.OrderSeriesNum = driver_order.findElement(By.className("com-block-num")).getText().replace("ご注文番号 ", "");//発注番号を取得

					
					int i=0;
					while(true){
						if(MonitorOrderInfo[i%10].OrderSeriesNum.equals(OrderInfo.OrderSeriesNum )){
							OrderInfo.OrderState = MonitorOrderInfo[i%10].OrderState;//発注状況
							if(OrderInfo.OrderState .equals("受付済")||OrderInfo.OrderState .equals("発注済")||OrderInfo.OrderState .equals("約定済")){
								OrderAgentLogWrite("I","株注文状態確認",OrderInfo);
								break;
							}
						}
						if(i>100){
							OrderAgentLogWrite("E","株注文番号確認タイムアウト",OrderInfo);
							break;
						}
						try{
							Thread.sleep(50);
						}catch (InterruptedException e){
						}	
						i++;
				
					}
				
				}catch(Exception e){
					System.out.println( e);
					ErrorLogWrite(ProcessName,SubProcessName, e.toString() );
					returnFlag = 1;
				}
			}
			else if(SimulationMode.equals("OFFLINE_SIMULATUION")||SimulationMode.equals("TEST_DATA_SIMULATION")){
			//---------------------擬似操作する場合-------------------------------------------------------------
				OrderInfo.StockName = target;	//株名
				OrderInfo.StockSeriesNum = target_num;//株シリアル番号
				OrderInfo.Ordertype = "BUY" ;//発注内容　BUY SELL
				OrderInfo.OrderPrice = OrderAction.Price.toString();//発注金額
				OrderInfo.OrderNum = "100";//発注数
				OrderInfo.OrderSeriesNum ="Test";//発注番号を取得
				OrderAgentLogWrite("I","株注文状態確認",OrderInfo);
			
			}
			return returnFlag;
		}
		int OrderChangeExec(WebDriver driver_order, UserAction OrderAction, OrderInfo OrderInfo,OrderInfo[] MonitorOrderInfo) {	
			String SubProcessName = "TESTOrderChangeExec ";
			int returnFlag=0;
			String OrderInfo_Row;
			int index=0;
			int flag = 0;
			//注文値段をチェックする必要がある
			
			//発注文なのに　すでに受け付け済みのものがあって注文変更の対応
			
			//チェックするロジックを書く
			
			//
			if(SimulationMode.equals("ONLINE")||SimulationMode.equals("OPERATION_SIMULATION")){ 
				try{
				//---------------------注文一覧→注文訂正・取消ページに移動------------------------------------------------------
					driver_order.findElement(By.xpath("//*[@id='global-navi']/div[2]/ul/li[2]/a")).click();;//株式取引ページに移動
					driver_order.findElement(By.xpath("//*[@id='gn_service-']/div[6]/div[2]/div/div/div[2]/div[1]/ul/li[2]/a")).click();;//株式取引注文約定一覧ページに移動
					driver_order.findElement(By.xpath("//*[@id='form01']/div[3]/div[1]/dl[2]/dd[1]/span[2]")).click(); //昇順
					driver_order.findElement(By.xpath("//*[@id='form01']/div[3]/div[2]/div[1]/input")).click();//配置変換
					
					List<WebElement> childs = driver_order.findElements(By.xpath("//*[@id='form01']/table/tbody/tr"));
					for (WebElement e  : childs){
						OrderInfo_Row = e.getText();
						if (index%2 == 1){
							String[] tempStr;
							String[] tempInfo = OrderInfo_Row.split("\n");
						
							tempStr = tempInfo[4].split(" ");
							if (tempStr[1].equals(OrderInfo.OrderSeriesNum)){  //注文番号が一致
								String path = "//*[@id='form01']/table/tbody/tr[" + (index+1) + "]/td[8]/a";
								driver_order.findElement(By.xpath(path)).click(); //該当注文にクリック
								flag++ ;
								break;
							}
						}
						index++;
					}
					if(flag==1){
					//driver_order.findElement(By.xpath("//*[@id='form01']/table/tbody/tr[2]/td[8]/a")).click(); //注文約定一覧　取消/変更クリック　→注文訂正・取消ページに移動
						//----------------------------注文訂正内容--------------------------------------------
						driver_order.findElement(By.xpath("//*[@id='tbCorrectCancel']/tbody/tr[7]/td/div/div[2]/div/span[2]/label")).click(); //注文約定一覧　取消/変更クリック
						driver_order.findElement(By.xpath("//*[@id='idOrderPrc']")).sendKeys(OrderAction.Price.toString()); //買い注文　→金額記載
				
					//----------------------------注文実行--------------------------------------------
						driver_order.findElement(By.xpath("//*[@id='gn_stock-sm_order']/div[7]/div/form/div[1]/div[1]/div[2]/div[1]/input")).click(); //注文訂正・取消ページ　取消実行(次へ)		
						driver_order.findElement(By.xpath("//*[@id='gn_service-lm_order']/div[7]/div/form/div[2]/div[1]/div[2]/div[2]/input")).click(); //注文訂正確認　実行		
						
						OrderInfo.OrderPrice = OrderAction.Price.toString();//発注金額変更
						
						int i=0;
						while(true){
							if(MonitorOrderInfo[i%10].OrderSeriesNum.equals(OrderInfo.OrderSeriesNum )){
								OrderInfo.OrderState = MonitorOrderInfo[i%10].OrderState;//発注状況
								if (OrderInfo.OrderState.equals("訂正中")||OrderInfo.OrderState.equals("訂正済")||OrderInfo.OrderState.equals("約定済") ){
									OrderAgentLogWrite("I","株注文更新確認",OrderInfo);
									break;
								}
							}
							if(i>100){
								OrderAgentLogWrite("E","株注文番号確認タイムアウト",OrderInfo);
								break;
							}
							try{
								Thread.sleep(50);
							}catch (InterruptedException e){
							}	
							i++;
						}	
						OrderAgentLogWrite("I","注文金額変更済み",OrderInfo);
					}
					else if(flag ==0){
						String e = "該当注文が見当たらないが、変更注文を受けている:"+OrderInfo.OrderSeriesNum;
						System.out.println(e);
						ErrorLogWrite(ProcessName,SubProcessName, e);
					}
				}catch(Exception e){
					System.out.println( e);
					ErrorLogWrite(ProcessName,SubProcessName, e.toString() );
					returnFlag = 2;
				}
			}
			else if(SimulationMode.equals("OFFLINE_SIMULATUION")||SimulationMode.equals("TEST_DATA_SIMULATION")){
				//---------------------擬似操作する場合-------------------------------------------------------------
					OrderInfo.OrderPrice = OrderAction.Price.toString();//発注金額変更	
				}
			return returnFlag;
		}
		int SellActionExec(WebDriver driver_order, UserAction OrderAction,OrderInfo[] MonitorOrderInfo ) {	
			String SubProcessName = "TradeOrder_SellActionExec ";
			int returnFlag=0;
			
			//注文値段をチェックする必要がある
			
			//チェックするロジックを書く
			
			//
			if(SimulationMode.equals("ONLINE")||SimulationMode.equals("OPERATION_SIMULATION")){ 
				try{
				//---------------------注文ページに移動し発注する------------------------------------------------------
					driver_order.findElement(By.xpath("//*[@id='global-navi']/div[2]/ul/li[2]/a")).click();//株式取引ページに移動
				//driver_order.findElement(By.xpath("//*[@id='focuson']")).sendKeys(target_num); //株式取引→銘柄記入
					driver_order.findElement(By.xpath("//*[@id='gn_service-']/div[6]/div[2]/div/div/div[2]/div[1]/ul/li[1]/a")).click();;//保有残高・口座管理ページに移動
					driver_order.findElement(By.xpath("//*[@id='gn_custAsset-lm_custAsset']/div[7]/div/form[1]/table[1]/tbody/tr[2]/td[8]/a[2]")).click();;//注文 売り注文ページに移動
				
					driver_order.findElement(By.xpath("//*[@id='gn_service-lm_amount']/div[6]/div[2]/form/div[1]/div[1]/div[1]/table/tbody/tr[5]/td/div/input")).sendKeys("100"); //売り注文　→株数記載
					driver_order.findElement(By.xpath("//*[@id='gn_service-lm_amount']/div[6]/div[2]/form/div[1]/div[1]/div[1]/table/tbody/tr[6]/td/div[2]/span/label")).click();//売り注文　→　指値
					driver_order.findElement(By.xpath("//*[@id='idOrderPrc']")).sendKeys(OrderAction.Price.toString()); //売り注文　→金額記載
				
				//----------------------------注文実行--------------------------------------------
					driver_order.findElement(By.xpath("//*[@id='gn_service-lm_amount']/div[6]/div[2]/form/div[1]/div[1]/div[2]/div/input")).click();//売り注文（次へ）
					driver_order.findElement(By.xpath("//*[@id='gn_service-lm_amount']/div[7]/div[1]/form/div/div[1]/div[1]/div[2]/div[2]/input")).click();//内容確認　売り実施
				//-------------------------------------------------------------------------------
					OrderInfo.StockName = target;	//株名
					OrderInfo.StockSeriesNum = target_num;//株シリアル番号
					OrderInfo.Ordertype = "SELL" ;//発注内容　BUY SELL
					OrderInfo.OrderPrice = OrderAction.Price.toString();//発注金額
					OrderInfo.OrderNum = "100";//発注数
					OrderInfo.OrderSeriesNum = driver_order.findElement(By.className("com-block-num")).getText().replace("ご注文番号 ", "");//発注番号を取得
					
					int i=0;
					while(true){
						if(MonitorOrderInfo[i%10].OrderSeriesNum.equals(OrderInfo.OrderSeriesNum )){
							OrderInfo.OrderState = MonitorOrderInfo[i%10].OrderState;//発注状況
							if(OrderInfo.OrderState .equals("受付済")||OrderInfo.OrderState .equals("発注済")||OrderInfo.OrderState .equals("約定済")){
								OrderAgentLogWrite("I","株注文状態確認",OrderInfo);
								break;
							}
						}
						if(i>100){
							OrderAgentLogWrite("E","株注文番号確認タイムアウト",OrderInfo);
							break;
						}
						try{
							Thread.sleep(50);
						}catch (InterruptedException e){
						}	
						i++;
					
					}
					
					OrderAgentLogWrite("I","売り注文発注済み",OrderInfo);
				}catch(Exception e){
					System.out.println( e);
					ErrorLogWrite(ProcessName,SubProcessName, e.toString() );
					returnFlag = 3;
				}
			}
			else if(SimulationMode.equals("OFFLINE_SIMULATUION")||SimulationMode.equals("TEST_DATA_SIMULATION")){
			//---------------------擬似操作する場合-------------------------------------------------------------
				OrderInfo.StockName = target;	//株名
				OrderInfo.StockSeriesNum = target_num;//株シリアル番号
				OrderInfo.Ordertype = "SELL" ;//発注内容　BUY SELL
				OrderInfo.OrderPrice = OrderAction.Price.toString();//発注金額
				OrderInfo.OrderNum = "100";//発注数
				OrderInfo.OrderSeriesNum ="Test";//発注番号を取得
				OrderAgentLogWrite("I","株注文状態確認",OrderInfo);
			}
			return returnFlag;
		}
		int OrderCancelExec(WebDriver driver_order, UserAction OrderAction,OrderInfo OrderInfo,OrderInfo[] MonitorOrderInfo) {	
			String SubProcessName = "TESTOrderCancelExec ";
			int returnFlag=0;
			String OrderInfo_Row;
			int index=0;
			int flag = 0;
			
			try{
				driver_order.findElement(By.xpath("//*[@id='global-navi']/div[2]/ul/li[2]/a")).click();;//株式取引ページに移動
				driver_order.findElement(By.xpath("//*[@id='gn_service-']/div[6]/div[2]/div/div/div[2]/div[1]/ul/li[2]/a")).click();;//株式取引注文約定一覧ページに移動
				driver_order.findElement(By.xpath("//*[@id='form01']/div[3]/div[1]/dl[2]/dd[1]/span[2]")).click(); //昇順
				driver_order.findElement(By.xpath("//*[@id='form01']/div[3]/div[2]/div[1]/input")).click();//配置変換
					
				List<WebElement> childs = driver_order.findElements(By.xpath("//*[@id='form01']/table/tbody/tr"));
				for (WebElement e  : childs){
					OrderInfo_Row = e.getText();
					if (index%2 == 1){
						String[] tempStr;
						String[] tempInfo = OrderInfo_Row.split("\n");
					
						tempStr = tempInfo[4].split(" ");
						if (tempStr[1].equals(OrderInfo.OrderSeriesNum)){  //注文番号が一致
							String path = "//*[@id='form01']/table/tbody/tr[" + (index+1) + "]/td[8]/a";
							driver_order.findElement(By.xpath(path)).click(); //該当注文にクリック
							flag++ ;
							break;
						}
					}
					index++;
				}
				if(flag==1){
				
					//---------------------注文約定一覧から注文を取消する------------------------------------------------------
					driver_order.findElement(By.xpath("//*[@id='tbCorrectCancel']/tbody/tr[13]/td/span")).click(); //注文訂正・取消ページ　取消クリック			
					driver_order.findElement(By.xpath("//*[@id='gn_stock-sm_order']/div[7]/div/form/div[1]/div[1]/div[2]/div[1]/input")).click(); //注文訂正・取消ページ　取消実行(次へ)
					//------------------------------------------------------------------------------------------------
					OrderAgentLogWrite("I","注文キャンセル済み",OrderInfo);
					OrderState = "ORDER_CHANCELLED";
				}
			}catch(Exception e){
				System.out.println( e);
				ErrorLogWrite(ProcessName,SubProcessName, e.toString() );
				OrderAgentLogWrite("E","予期しないエラー："+SubProcessName,OrderInfo);
				returnFlag = 4;
			}
			//-------------------------------------------------------------------------------
			return returnFlag;
		}
		void OrderAgentLogWrite(String Msg_type,String Msg,OrderInfo OrderInfo){ //create statics log file  時間　Userアクション	値段	Operatorアクション	値段　OperatorState	
			Calendar rightNow;
			Date Now = new Date();
			SimpleDateFormat D = new SimpleDateFormat("yyyy/MM/dd	HH:mm:ss.SSS");
			rightNow = Calendar.getInstance();
			Now = rightNow.getTime();
			String temp =  D.format(Now) +"	"+target+"	"+Msg_type+"	"+Msg;
			temp = temp +"	"+	OrderInfo.StockSeriesNum+"	"+	OrderInfo.StockName+"	"+	
					OrderInfo.Ordertype+"	"+	OrderInfo.OrderPrice+"	"+	OrderInfo.OrderNum+"	"+	
					OrderInfo.StockSeriesNum+"	"+	OrderInfo.OrderState+"\r\n";
			//更新待ち		
			OrderAgentLog.FileWrite(temp);
			
		}	
	}
	
	public class OrderMonitorUnit extends DefinedData{
		String SimulationMode ;
		String target;
		String target_num;
		String MonitorState = "STANDBY";//監視状況
		String MonitorAgentUnitState;
		Random rnd ;
	
		LogUnit TradeMonitorAgentLog;  // TradeMonitor log
		LogUnit ErrorLog;
		
		String OrderState; // 待機（注文がないとき）、注文中、注文済、取消中、取消済、
		Boolean NewOrderEntry;
		Boolean NewSellEntry;
		Boolean Confirmed;
		
		BigDecimal preBuyTrend;
		BigDecimal preSellTrend;
		
		UserProperty UserProperty;
		TradeStatics DecisionTradeStaticsData;
		
		OrderInfo[] MonitoringOrderInfo = new OrderInfo[20];
		
		OrderMonitorUnit(String target,String target_num,WebDriver driver_monitor_Order,WebDriver driver_monitor_Property, UserProperty UserProperty,TradeStatics TradeStatics,LogUnit ErrorLog,String SimulationMode,String LogPath, int Speed){

			String SubProcessName = "TradeMonitoringUnit_Initiation";
			this.MonitorAgentUnitState = "PREPARE";
			System.out.println( target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Activating" );
			
			this.SimulationMode = SimulationMode;
			this.target = target;
			this.target_num = target_num;
			this.ErrorLog = ErrorLog;
			this.UserProperty = UserProperty;
			this.DecisionTradeStaticsData = TradeStatics;
			
			this.NewSellEntry 	= false;
			this.NewOrderEntry 	= false;
			this.Confirmed		= false;
			this.OrderState ="待機";
			
			for (int i =0 ; i <20;i++){ //注文一覧情報の保存先
				this.MonitoringOrderInfo[i] = new OrderInfo();
			}
			//for (int i =0 ; i <10;i++){
			//	UserProperty.HoldStockList.add(i,new HoldStockInfo());
			//}
			
			
			TradeMonitorOrderPageOpen(driver_monitor_Order);
			TradeMonitorPropertyPageOpen(driver_monitor_Property);
			//Test(driver_monitor);
			
			TradeMonitorAgentLog = new LogUnit(LogPath+"trade//",this.target+"TradeMonitorAgent",0); // create log file

			MonitorAgentUnitState = "READY";
			System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Ready" );	
		}	
		public void run(){ 
			String SubProcessName = "TradeMonitoringUnit_MainLoop ";
			System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Standby" );
			String PreState = MonitorAgentUnitState;
			Calendar rightNow;
			
			while(!MonitorAgentUnitState.equals("END")){
				switch(MonitorAgentUnitState){
				
				case "READY":
					
					break;	
				case "START":	
					if (PreState.equals("READY")){
						//初回のプロセスの起動に使う
						PreState = MonitorAgentUnitState;
						System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Start");
					}	
					PropertyCheck(UserProperty);			
					OrderCheck();
					
					try{
						Thread.sleep(100);
					}catch (InterruptedException e){
					}
					
					System.out.println( target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Start");
					break;
				case "PAUSE":
					//System.out.println( "TradeOperatorUnit PAUSE");
					break;
				case "FINISHING":
					MonitorAgentUnitState = "END";
					break;
				case "ERROR":	
					//System.out.println( "TradeOperatorUnit ERROR");
					break;
				}	
				try{
					Thread.sleep(500);
				}catch (InterruptedException e){
				}	
			}		
			System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"End" );
			//start any web access process 
		}	
		void TradeMonitorOrderPageOpen(WebDriver driver_monitor_Order){
			String SubProcessName = "TradeMonitorOrderPageOpen ";
			driver_monitor_Order.get(ADDRESS);
			Login(driver_monitor_Order, UserProperty.USER_NAME, UserProperty.PASSWORD);	
			driver_monitor_Order.findElement(By.xpath("//*[@id='global-navi']/div[2]/ul/li[2]/a")).click();;//株式取引ページに移動
			driver_monitor_Order.findElement(By.xpath("//*[@id='gn_service-']/div[6]/div[2]/div/div/div[2]/div[1]/ul/li[2]/a")).click();;//株式取引注文約定一覧に移動
			
		}
		void TradeMonitorPropertyPageOpen(WebDriver driver_monitor_Property){
			String SubProcessName = "TradeMonitorPropertyPageOpen ";
			driver_monitor_Property.get(ADDRESS);
			Login(driver_monitor_Property, UserProperty.USER_NAME, UserProperty.PASSWORD);	
			driver_monitor_Property.findElement(By.xpath("//*[@id='global-navi']/div[2]/ul/li[2]/a")).click();;//株式取引ページに移動
			driver_monitor_Property.findElement(By.xpath("//*[@id='gn_service-']/div[6]/div[2]/div/div/div[2]/div[1]/ul/li[1]/a")).click();;//保有残高・売却に移動
				
		}

		void OrderCheck(){//定期的に注文履歴の状況を更新
			String SubProcessName = "TradeMonitor_OrderCheck ";
			driver_monitor_Order.findElement(By.xpath("//*[@id='form01']/p[1]/a")).click();
			driver_monitor_Order.findElement(By.xpath("//*[@id='form01']/div[3]/div[1]/dl[2]/dd[1]/span[2]")).click(); //昇順
			driver_monitor_Order.findElement(By.xpath("//*[@id='form01']/div[3]/div[2]/div[1]/input")).click();//配置変換
			
			String OrderInfo_title;
			String OrderInfo_Row;
			int index=0;
			
			List<WebElement> childs = driver_monitor_Order.findElements(By.xpath("//*[@id='form01']/table/tbody/tr"));
			try{

				for (WebElement e  : childs)
				{
					OrderInfo_Row = e.getText();
					if (!OrderInfo_Row.contains("株式注文はありません")){
						if (index%2 == 1){
							//OrderInfo_title = driver_monitor.findElement(By.xpath("//*[@id='form01']/table/tbody/tr[1]")).getText();
							//OrderInfo_Row = driver_monitor.findElement(By.xpath("//*[@id='form01']/table/tbody/tr[2]")).getText();
							String[] tempStr;
							String[] tempInfo = OrderInfo_Row.split("\n");
					
							int tempIndex = (index-1)/2;
					
							MonitoringOrderInfo[tempIndex].StockName = tempInfo[0]; //銘柄名
					
							tempStr = tempInfo[1].split(" "); 
							MonitoringOrderInfo[tempIndex].StockSeriesNum  = tempStr[0]; //銘柄番号
					
							tempStr = tempInfo[3].split(" "); 
							MonitoringOrderInfo[tempIndex].Ordertype =  tempStr[0]; //売買
							tempStr[1] = tempStr[1].replace("株", "");
							MonitoringOrderInfo[tempIndex].OrderNum =  tempStr[1];  //株数
					
							tempStr = tempInfo[4].split(" ");
							tempStr[0] = tempStr[0].replace(",", "");
							tempStr[0] = tempStr[0].replace("円", "");
							MonitoringOrderInfo[tempIndex].OrderPrice = tempStr[0]; //価格
							MonitoringOrderInfo[tempIndex].OrderSeriesNum = tempStr[1].replace("ご注文番号 ", ""); //注文番号　//変更する項目か分からない
							MonitoringOrderInfo[tempIndex].OrderState = tempInfo[7]; //注文状態
						}
					}
					index++;
				}
				System.out.println(MonitoringOrderInfo[0].OrderNum+"	"+MonitoringOrderInfo[0].OrderSeriesNum+"	"+MonitoringOrderInfo[0].OrderState);
				
			}catch(Exception e){
				System.out.println( e);
				ErrorLogWrite(ProcessName,SubProcessName, e.toString() );
			}
				//System.out.println(OrderInfo_title);
				//System.out.println(OrderInfo_Row);
				
				//新しい注文に対する対応状況を確認するロジック
		}	
		void PropertyCheck(UserProperty UserProperty){
			String temp;
			String OrderInfo_Row;
			int index=0;
			int flag = 0;
			temp = driver_monitor_Property.findElement(By.xpath("//*[@id='gn_custAsset-lm_custAsset']/div[7]/div/form[1]/div[1]/div")).getText();
			String[] tempStr;
			String[] tempInfo = temp.split(" ");
			
			UserProperty.cash = new BigDecimal(tempInfo[1].replace("円", "").replace(",", "")); //所持現金情報を取得
			
			List<WebElement> TempHoldStockList;
			TempHoldStockList = driver_monitor_Property.findElements(By.xpath("//*[@id='gn_custAsset-lm_custAsset']/div[7]/div/form[1]/table[1]/tbody/tr"));
			for (WebElement e  : TempHoldStockList){
				OrderInfo_Row = e.getText();
				if (index%2 == 1){
					
					tempStr = OrderInfo_Row.split("\n");
						
					//HoldStockList = tempStr[0]; //銘柄名 
					
					tempStr = tempInfo[4].split(" ");
					if (tempStr[1].equals(target_num)){  //注文番号が一致
						flag++ ;
						break;
					}
				}
				index++;
			}
		
		}
		public void TradeMonitorLogWrite(){
			String SubProcessName = "TradeMonitorLogWrite";
	    	Calendar rightNow;
	    	Date Now = new Date();
	    	SimpleDateFormat D = new SimpleDateFormat("yyyy/MM/dd	HH:mm:ss.SSS");
	    	rightNow = Calendar.getInstance();
			Now = rightNow.getTime();
			
			//String temp = TradeStatics.StaticsNumber +"	"+ BoardInfo.DataNumber+"	"+D.format(Now)+"	"; 
			//temp =temp + UserProperty.UserAction.ActionScore+"	";	
			//temp  = temp + "\r\n";
			//TradeMonitorAgentLog.FileWrite(temp);	
			
		}				
	}
	
	public class OrderPanelUnit extends JFrame {
		private static final long serialVersionUID = 1L;
		JPanel contentPane = new JPanel();
		BorderLayout borderLayout1 = new BorderLayout();
		JTextField result = new JTextField(""); //計算結果を表示するテキストフィールド
		UserProperty UserProperty;
		
		int index =0; 
		
		OrderPanelUnit(UserProperty UserProperty){ //初期化

			String SubProcessName = "OrderPanelUnit_Initiation";
			MonitorAgentUnitState = "PREPARE";
			System.out.println( target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Activating" );
		
			this.UserProperty = UserProperty;

			contentPane.setLayout(borderLayout1);
			this.setSize(new Dimension(250, 300));
			this.setTitle("電子式卓上計算機");
			this.setContentPane(contentPane);

			contentPane.add(result, BorderLayout.NORTH); //テキストフィールドを配置

			JPanel keyPanel = new JPanel(); //ボタンを配置するパネルを用意
			keyPanel.setLayout(new GridLayout(5, 1)); //4行4列のGridLayoutにする
			contentPane.add(keyPanel, BorderLayout.CENTER);

			keyPanel.add(new NumberButton("Buy 253","BUY",index, 253)); //ボタンをレイアウトにはめこんでいく
			keyPanel.add(new NumberButton("Buy 254","BUY",index, 254));
			keyPanel.add(new NumberButton("Sell 255","SELL",index, 255));
			keyPanel.add(new NumberButton("Sell 256","SELL",index, 256));
			//keyPanel.add(new CancelButton("Cancel","Cancel"));
	
			
			
			contentPane.add(new JButton("C"), BorderLayout.SOUTH);//Cボタンを配置する
			this.setVisible(true);

			MonitorAgentUnitState = "READY";
			System.out.println(target+ "	"+ProcessName+"_"+SubProcessName+"_"+SimulationMode+"_"+"Ready" );	
		}
		public class NumberButton extends JButton implements ActionListener {
			private static final long serialVersionUID = 1L;	
			String command;
			double price;
			
			public NumberButton(String keyTop,String command ,int index,double price) {
				super(keyTop); //JButtonクラスのコンストラクタを呼び出す
				this.command = command;
				this.price = price;
				this.addActionListener(this); //このボタンにアクションイベントのリスナを設定
			}

			public void actionPerformed(ActionEvent evt) {
				String keyNumber = this.getText(); //ボタンの名前を取り出す
				index++;
				UserProperty.UserAction.NewOrder =true;
				UserProperty.UserAction.ActionIndex = index;
				UserProperty.UserAction.Action[0] = command;
				UserProperty.UserAction.ActionNum = 1;
				UserProperty.UserAction.Price = new BigDecimal(price);
				UserProperty.UserAction.OrderStockNum =  new BigDecimal(100);
				
				System.out.println(index +"	"+keyNumber );	
			}
		}
		public class CancelButton extends JButton implements ActionListener {
			private static final long serialVersionUID = 1L;
			String command;

			
			public CancelButton(String keyTop, String command) {
				super(keyTop); //JButtonクラスのコンストラクタを呼び出す
				this.command = command;
				this.addActionListener(this); //このボタンにアクションイベントのリスナを設定
			}

			public void actionPerformed(ActionEvent evt) {
				String keyNumber = this.getText(); //ボタンの名前を取り出す
				index++;
				UserProperty.UserAction.NewOrder =true;
				UserProperty.UserAction.ActionIndex = index;
				UserProperty.UserAction.Action[0] = command;
//				UserProperty.UserAction.ActionNum = 1;
				
				System.out.println(keyNumber);	
			}
		}
}
	
	void Login(WebDriver driver,String user_name, String password) {	
		//---------------------Login ------------------------------------------------------
			driver.findElement(By.name("loginid")).sendKeys(user_name);
			driver.findElement(By.name("passwd")).sendKeys(password);
			driver.findElement(By.className("text-button")).click();
		//---------------------------------------------------------------------------------
	}
	
	void ErrorLogWrite(String ProccessName, String SubProcessName , String Error){
		Calendar rightNow;
		Date Now = new Date();
    	SimpleDateFormat D = new SimpleDateFormat("yyyy/MM/dd	HH:mm:ss.SSS");
    	rightNow = Calendar.getInstance();
		Now = rightNow.getTime();
		
		String temp =  D.format(Now) + "	" + ProccessName + "	" + SubProcessName + "	" +Error +"\r\n";
		ErrorLog.FileWrite(temp);
		
	}

	void TradeOperatorLogWrite(String SubProcess,String Msg_type,String Msg,UserProperty UserProperty){ //create statics log file  時間　Userアクション	値段	Operatorアクション	値段　OperatorState	
		Calendar rightNow;
		Date Now = new Date();
    	SimpleDateFormat D = new SimpleDateFormat("yyyy/MM/dd	HH:mm:ss.SSS");
    	rightNow = Calendar.getInstance();
		Now = rightNow.getTime();
	
	
		String temp =  D.format(Now) +"	"+target+"	"+SubProcess+"	"+Msg_type +"	"+Msg+"	:";
		temp = temp + UserProperty.UserAction.ActionIndex+"	"+UserProperty.UserAction.Action[0]+"	"+OperatorState+"	"+UserProperty.UserAction.Price+"	"+UserProperty.UserAction.OrderStockNum+"\r\n";
		//temp = temp + OrderAgentUnit.OrderAgentAction.ActionIndex+"	"+ OrderAgentUnit.OrderAgentAction.Action[0]+"	"+ OrderAgentUnit.OrderAgentAction.Action[1]+
		//		"	"+ OrderAgentUnit.OrderAgentAction.Price+"	"+OrderAgentUnit.OrderAgentAction.OrderStockNum+"\r\n";
		TradeOperatorLog.FileWrite(temp);
	
	}
	

	
}

