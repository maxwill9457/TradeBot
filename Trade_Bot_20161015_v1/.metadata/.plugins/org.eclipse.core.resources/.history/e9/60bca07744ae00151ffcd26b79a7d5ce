import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;



import java.util.Date;
import java.util.TimerTask;
import java.text.SimpleDateFormat;
import java.util.Calendar;


public class TradeUnit extends DefinedData  {
	
	String 	TradeUnitState; // Trade operation enable/disable
	String 	target; // Trade target
	
	DefinedData TradeData;
	WebAccessUnit 	WebAccess; // Trade operation associated with web access 
	CatchException WebAccess_catchException;
	
	DecisionMakingUnit	DecisionMaking;
	LogUnit TradeLog;  // Trade operation log
	WriteLog WriteLog; 	
	
	java.util.Timer TradeUnitTimer;
	
	Calendar rightNow;
	
	int StartTime 	= 00000;
	int EndTime		= 240000;
	//int StartTime 	= 0;
	//int EndTime		= 30000;
	
	TradeUnit(String temp){
		
		this.target = temp; 
		TradeUnitState = "PREPARE";
		System.out.println( target+ " TradeUnit Activating" );
			
		TradeData = new DefinedData();
		
		WebAccess = new WebAccessUnit(this.target,TradeData.BoardInfo); // create web access
		WebAccess_catchException = new CatchException();
		WebAccess.setName("Thread-WebAccess-"+target);
		WebAccess.setUncaughtExceptionHandler(WebAccess_catchException);
		WebAccess.start();
		
		DecisionMaking = new DecisionMakingUnit(this.target,TradeData.BoardInfo,TradeData.UserProperty,TradeData.TradeStatics); //create Decision Making
		DecisionMaking.start();
		
		TradeLog = new LogUnit(this.target); // create log file
		
		WriteLog= new WriteLog(); 
		TradeUnitTimer= new java.util.Timer();
		TradeUnitTimer.schedule(WriteLog,0,500);
		
		TradeUnitState = "READY";
		System.out.println( target +" TradeUnit Ready" );	
	}

	public void run(){ // 交易核心   結合情報截取  交易邏輯  記錄 交易行動
		
		while(!TradeUnitState.equals("END")){
			
			TradeUnitAlarm(); //decide TradeUnit state 
			
			switch(TradeUnitState){
			
			case "READY":
				break;	
			case "START":	
				WebAccess.WebAccessUnitState = "START";		
				break;
			case "PAUSE":
				break;
			case "FINISHING":
				System.out.println( "TradeUnit FINISHING	" + target );
				//---------------気配板プロセスの完了待つ-----------------------------
				WebAccess.WebAccessUnitState = "FINISHING";
				while(!WebAccess.WebAccessUnitState.equals("END")){
					try{
						Thread.sleep(100);
					}catch (InterruptedException e){
					}
				}
				DecisionMaking.DecisionMakingUnitState = "FINISHING";
				while(!DecisionMaking.DecisionMakingUnitState.equals("END")){
					try{
						Thread.sleep(100);
					}catch (InterruptedException e){
					}
				}
				TradeUnitTimer.cancel();
				TradeUnitState = "END";
				break;
			case "ERROR":	
				break;
				
			}	
			try{
				Thread.sleep(500);
			}catch (InterruptedException e){
			}	
		}
		System.out.println( "TradeUnit END	" + target );
		
	}
	
	void TradeUnitAlarm(){
		
		rightNow = Calendar.getInstance();
		int tHour = rightNow.get(rightNow.HOUR_OF_DAY); // get hour
		int tMinute 	= rightNow.get(rightNow.MINUTE);
		int tSecond 	= rightNow.get(rightNow.SECOND);
		
		int indextime = tHour*10000+tMinute*100+tSecond;
		
		if (indextime >= StartTime && indextime<=EndTime){ // 8:00 record start 15:00 record finish
			TradeUnitState = "START";
			
			System.out.println( "TradeUnitAlarm_START"+target);
		}
		else if(indextime<StartTime){ //standby
			TradeUnitState = "READY";
			System.out.println( "TradeUnitAlarm_READY"+target);
		}
		else if (indextime>EndTime){
			TradeUnitState = "FINISHING";
			System.out.println( "TradeUnitAlarm_FINISH"+target);
		}
	}
	
	class WriteLog extends TimerTask {  //output log per one second
	    public void run() {
	    	
	    	Date Now = new Date();
	    	SimpleDateFormat D = new SimpleDateFormat("yyyy/MM/dd	HH:mm:ss");
	    	rightNow = Calendar.getInstance();
			Now = rightNow.getTime();
			
	    	switch(TradeUnitState){
			
			case "READY":	
				break;
				
			case "START":
				
				if(TradeUnitState.equals("START")){
					/*
					while(BoardInfo.Locking == true ){
						try{
							Thread.sleep(10);
						}catch (InterruptedException e){
						}	
					}
					BoardInfo.Locking = true;*/
					String temp;
					synchronized (BoardInfo.BoardInfoLock){
						temp = D.format(Now)+"	";
						temp = temp +TradeData.BoardInfo.Shijyou+"	"+TradeData.BoardInfo.ShijyouNetChange+"	"
				               	   +TradeData.BoardInfo.Price+"	"+TradeData.BoardInfo.NetChange+"	"+TradeData.BoardInfo.NetChangePercent+"	";
						for (int i=0 ; i<23; i++){
							temp = temp + TradeData.BoardInfo.Board[i][0] + "	" +TradeData.BoardInfo.Board[i][1]+ "	" +TradeData.BoardInfo.Board[i][2]+ "	";
							System.out.println(TradeData.BoardInfo.Board[i][0] + "	"+TradeData.BoardInfo.Board[i][1]+ "	" +TradeData.BoardInfo.Board[i][2]);
						}
						temp = temp + "	board	"+TradeData.BoardInfo.BoardTime;
						temp = temp + "\r\n";
						
						/*
						TradeLog.FileWrite(D.format(Now)+"	");// date  time
					
						TradeLog.FileWrite(	TradeData.BoardInfo.Shijyou+"	"+TradeData.BoardInfo.ShijyouNetChange+"	"
					               	   +TradeData.BoardInfo.Price+"	"+TradeData.BoardInfo.NetChange+"	"+TradeData.BoardInfo.NetChangePercent+"	"); // price 
						for (int i=0 ; i<19; i++){
							TradeLog.FileWrite(TradeData.BoardInfo.Board[i][0] + "	" +TradeData.BoardInfo.Board[i][1]+ "	" +TradeData.BoardInfo.Board[i][2]+ "	");
							//System.out.println(TradeData.BoardInfo.Board[i][0] + "	"+TradeData.BoardInfo.Board[i][1]+ "	" +TradeData.BoardInfo.Board[i][2]);
						}
						TradeLog.FileWrite("	board	"+TradeData.BoardInfo.BoardTime);
						TradeLog.FileWrite("\r\n");*/
					}
					TradeLog.FileWrite(temp);
					//BoardInfo.Locking = false;
				}
				break;
			case "PAUSE":
				System.out.println( "WriteLog PAUSE");
				break;
			case "FINISHING":	
				System.out.println( "WriteLog FINISHING");
				break;
			case "ERROR":	
				System.out.println( "WriteLog ERROR");
				break;		
			} 	
	    }
	}
	
	//void TradeUnitEnd(){
		
	//}
}
